
hmm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a08  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08003b18  08003b18  00013b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b54  08003b54  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08003b54  08003b54  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b54  08003b54  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b54  08003b54  00013b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b58  08003b58  00013b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003b5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  20000018  08003b74  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  08003b74  00020150  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aaeb  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018d1  00000000  00000000  0002ab6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c40  00000000  00000000  0002c440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009b6  00000000  00000000  0002d080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016aad  00000000  00000000  0002da36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d756  00000000  00000000  000444e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000867ed  00000000  00000000  00051c39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000035f4  00000000  00000000  000d8428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003e  00000000  00000000  000dba1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000018 	.word	0x20000018
 800012c:	00000000 	.word	0x00000000
 8000130:	08003b00 	.word	0x08003b00

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000001c 	.word	0x2000001c
 800014c:	08003b00 	.word	0x08003b00

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <LCD_Command>:
char distance[] ="Distance:";
volatile double flag = 0;
volatile double val1 = 0, val2 = 0, kc = 0,a=0,b=0;
volatile int32_t diff = 0;
void LCD_Command(char cmd)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af02      	add	r7, sp, #8
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
	char data_l, data_u;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	f023 030f 	bic.w	r3, r3, #15
 8000a5c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	011b      	lsls	r3, r3, #4
 8000a62:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000a64:	7bfb      	ldrb	r3, [r7, #15]
 8000a66:	f043 030c 	orr.w	r3, r3, #12
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000a6e:	7bfb      	ldrb	r3, [r7, #15]
 8000a70:	f043 0308 	orr.w	r3, r3, #8
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000a78:	7bbb      	ldrb	r3, [r7, #14]
 8000a7a:	f043 030c 	orr.w	r3, r3, #12
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000a82:	7bbb      	ldrb	r3, [r7, #14]
 8000a84:	f043 0308 	orr.w	r3, r3, #8
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, LCD_ADDR,(uint8_t *) data_t, 4, 100);
 8000a8c:	f107 0208 	add.w	r2, r7, #8
 8000a90:	2364      	movs	r3, #100	; 0x64
 8000a92:	9300      	str	r3, [sp, #0]
 8000a94:	2304      	movs	r3, #4
 8000a96:	214e      	movs	r1, #78	; 0x4e
 8000a98:	4803      	ldr	r0, [pc, #12]	; (8000aa8 <LCD_Command+0x5c>)
 8000a9a:	f001 f999 	bl	8001dd0 <HAL_I2C_Master_Transmit>
}
 8000a9e:	bf00      	nop
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000034 	.word	0x20000034

08000aac <LCD_Data>:
void LCD_Data(char data)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af02      	add	r7, sp, #8
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	71fb      	strb	r3, [r7, #7]
	char data_l, data_u;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	f023 030f 	bic.w	r3, r3, #15
 8000abc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	011b      	lsls	r3, r3, #4
 8000ac2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000ac4:	7bfb      	ldrb	r3, [r7, #15]
 8000ac6:	f043 030d 	orr.w	r3, r3, #13
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000ace:	7bfb      	ldrb	r3, [r7, #15]
 8000ad0:	f043 0309 	orr.w	r3, r3, #9
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000ad8:	7bbb      	ldrb	r3, [r7, #14]
 8000ada:	f043 030d 	orr.w	r3, r3, #13
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000ae2:	7bbb      	ldrb	r3, [r7, #14]
 8000ae4:	f043 0309 	orr.w	r3, r3, #9
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, LCD_ADDR,(uint8_t *) data_t, 4, 100);
 8000aec:	f107 0208 	add.w	r2, r7, #8
 8000af0:	2364      	movs	r3, #100	; 0x64
 8000af2:	9300      	str	r3, [sp, #0]
 8000af4:	2304      	movs	r3, #4
 8000af6:	214e      	movs	r1, #78	; 0x4e
 8000af8:	4803      	ldr	r0, [pc, #12]	; (8000b08 <LCD_Data+0x5c>)
 8000afa:	f001 f969 	bl	8001dd0 <HAL_I2C_Master_Transmit>
}
 8000afe:	bf00      	nop
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000034 	.word	0x20000034

08000b0c <LCD_Init>:
void LCD_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000b10:	2032      	movs	r0, #50	; 0x32
 8000b12:	f000 fd4b 	bl	80015ac <HAL_Delay>
	LCD_Command(0x30);
 8000b16:	2030      	movs	r0, #48	; 0x30
 8000b18:	f7ff ff98 	bl	8000a4c <LCD_Command>
	HAL_Delay(5);  // wait for >4.1ms
 8000b1c:	2005      	movs	r0, #5
 8000b1e:	f000 fd45 	bl	80015ac <HAL_Delay>
	LCD_Command (0x30);
 8000b22:	2030      	movs	r0, #48	; 0x30
 8000b24:	f7ff ff92 	bl	8000a4c <LCD_Command>
	HAL_Delay(1);  // wait for >100us
 8000b28:	2001      	movs	r0, #1
 8000b2a:	f000 fd3f 	bl	80015ac <HAL_Delay>
	LCD_Command (0x30);
 8000b2e:	2030      	movs	r0, #48	; 0x30
 8000b30:	f7ff ff8c 	bl	8000a4c <LCD_Command>
	HAL_Delay(10);
 8000b34:	200a      	movs	r0, #10
 8000b36:	f000 fd39 	bl	80015ac <HAL_Delay>
	LCD_Command (0x20);  // 4bit mode
 8000b3a:	2020      	movs	r0, #32
 8000b3c:	f7ff ff86 	bl	8000a4c <LCD_Command>
	HAL_Delay(10);
 8000b40:	200a      	movs	r0, #10
 8000b42:	f000 fd33 	bl	80015ac <HAL_Delay>

  // dislay initialisation
	LCD_Command (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000b46:	2028      	movs	r0, #40	; 0x28
 8000b48:	f7ff ff80 	bl	8000a4c <LCD_Command>
	HAL_Delay(1);
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f000 fd2d 	bl	80015ac <HAL_Delay>
	LCD_Command (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000b52:	2008      	movs	r0, #8
 8000b54:	f7ff ff7a 	bl	8000a4c <LCD_Command>
	HAL_Delay(1);
 8000b58:	2001      	movs	r0, #1
 8000b5a:	f000 fd27 	bl	80015ac <HAL_Delay>
	LCD_Command (0x01);  // clear display
 8000b5e:	2001      	movs	r0, #1
 8000b60:	f7ff ff74 	bl	8000a4c <LCD_Command>
	HAL_Delay(1);
 8000b64:	2001      	movs	r0, #1
 8000b66:	f000 fd21 	bl	80015ac <HAL_Delay>
	HAL_Delay(1);
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	f000 fd1e 	bl	80015ac <HAL_Delay>
	LCD_Command (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000b70:	2006      	movs	r0, #6
 8000b72:	f7ff ff6b 	bl	8000a4c <LCD_Command>
	HAL_Delay(1);
 8000b76:	2001      	movs	r0, #1
 8000b78:	f000 fd18 	bl	80015ac <HAL_Delay>
	LCD_Command (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000b7c:	200c      	movs	r0, #12
 8000b7e:	f7ff ff65 	bl	8000a4c <LCD_Command>

}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <LCD_GotoXY>:
void LCD_GotoXY(uint8_t row, uint8_t col, char data)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b084      	sub	sp, #16
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	71fb      	strb	r3, [r7, #7]
 8000b90:	460b      	mov	r3, r1
 8000b92:	71bb      	strb	r3, [r7, #6]
 8000b94:	4613      	mov	r3, r2
 8000b96:	717b      	strb	r3, [r7, #5]
	unsigned char cmd;
	cmd = (row==1?0x80:0xC0) + col - 1;
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d101      	bne.n	8000ba2 <LCD_GotoXY+0x1c>
 8000b9e:	2280      	movs	r2, #128	; 0x80
 8000ba0:	e000      	b.n	8000ba4 <LCD_GotoXY+0x1e>
 8000ba2:	22c0      	movs	r2, #192	; 0xc0
 8000ba4:	79bb      	ldrb	r3, [r7, #6]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	3b01      	subs	r3, #1
 8000bac:	73fb      	strb	r3, [r7, #15]
	LCD_Command(cmd);
 8000bae:	7bfb      	ldrb	r3, [r7, #15]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff ff4b 	bl	8000a4c <LCD_Command>
	LCD_Data(data);
 8000bb6:	797b      	ldrb	r3, [r7, #5]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff ff77 	bl	8000aac <LCD_Data>

}
 8000bbe:	bf00      	nop
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <LCD_String>:
void LCD_String(char *s)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
	while(*s)
 8000bce:	e007      	b.n	8000be0 <LCD_String+0x1a>
	{
		LCD_Data(*s);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff ff69 	bl	8000aac <LCD_Data>
		s++;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	607b      	str	r3, [r7, #4]
	while(*s)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d1f3      	bne.n	8000bd0 <LCD_String+0xa>
	}
}
 8000be8:	bf00      	nop
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <LCD_GotoXY_String>:
void LCD_GotoXY_String(uint8_t row, uint8_t col, char* data)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b084      	sub	sp, #16
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	603a      	str	r2, [r7, #0]
 8000bfc:	71fb      	strb	r3, [r7, #7]
 8000bfe:	460b      	mov	r3, r1
 8000c00:	71bb      	strb	r3, [r7, #6]
	unsigned char cmd;
	cmd = (row==1?0x80:0xC0) + col - 1;
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d101      	bne.n	8000c0c <LCD_GotoXY_String+0x1a>
 8000c08:	2280      	movs	r2, #128	; 0x80
 8000c0a:	e000      	b.n	8000c0e <LCD_GotoXY_String+0x1c>
 8000c0c:	22c0      	movs	r2, #192	; 0xc0
 8000c0e:	79bb      	ldrb	r3, [r7, #6]
 8000c10:	4413      	add	r3, r2
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	3b01      	subs	r3, #1
 8000c16:	73fb      	strb	r3, [r7, #15]
	LCD_Command(cmd);
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff ff16 	bl	8000a4c <LCD_Command>
	LCD_String(data);
 8000c20:	6838      	ldr	r0, [r7, #0]
 8000c22:	f7ff ffd0 	bl	8000bc6 <LCD_String>

}
 8000c26:	bf00      	nop
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	7f1b      	ldrb	r3, [r3, #28]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	f040 8148 	bne.w	8000ed2 <HAL_TIM_IC_CaptureCallback+0x2a2>
	{
		int temp;
		if(flag == 0)
 8000c42:	4bab      	ldr	r3, [pc, #684]	; (8000ef0 <HAL_TIM_IC_CaptureCallback+0x2c0>)
 8000c44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c48:	f04f 0200 	mov.w	r2, #0
 8000c4c:	f04f 0300 	mov.w	r3, #0
 8000c50:	f7ff fea2 	bl	8000998 <__aeabi_dcmpeq>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d030      	beq.n	8000cbc <HAL_TIM_IC_CaptureCallback+0x8c>
		{
			val1 = HAL_TIM_ReadCapturedValue(htim,TIM_CHANNEL_1);
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f002 fc21 	bl	80034a4 <HAL_TIM_ReadCapturedValue>
 8000c62:	4603      	mov	r3, r0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fbb5 	bl	80003d4 <__aeabi_ui2d>
 8000c6a:	4602      	mov	r2, r0
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	49a1      	ldr	r1, [pc, #644]	; (8000ef4 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8000c70:	e9c1 2300 	strd	r2, r3, [r1]
			flag = 1;
 8000c74:	499e      	ldr	r1, [pc, #632]	; (8000ef0 <HAL_TIM_IC_CaptureCallback+0x2c0>)
 8000c76:	f04f 0200 	mov.w	r2, #0
 8000c7a:	4b9f      	ldr	r3, [pc, #636]	; (8000ef8 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 8000c7c:	e9c1 2300 	strd	r2, r3, [r1]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_FALLING);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	6a1a      	ldr	r2, [r3, #32]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f022 020a 	bic.w	r2, r2, #10
 8000c8e:	621a      	str	r2, [r3, #32]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	6a1a      	ldr	r2, [r3, #32]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f042 0202 	orr.w	r2, r2, #2
 8000c9e:	621a      	str	r2, [r3, #32]
			a++;
 8000ca0:	4b96      	ldr	r3, [pc, #600]	; (8000efc <HAL_TIM_IC_CaptureCallback+0x2cc>)
 8000ca2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ca6:	f04f 0200 	mov.w	r2, #0
 8000caa:	4b93      	ldr	r3, [pc, #588]	; (8000ef8 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 8000cac:	f7ff fa56 	bl	800015c <__adddf3>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	4991      	ldr	r1, [pc, #580]	; (8000efc <HAL_TIM_IC_CaptureCallback+0x2cc>)
 8000cb6:	e9c1 2300 	strd	r2, r3, [r1]
			flag = 0;
			__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_RISING);
		}
	}

}
 8000cba:	e10a      	b.n	8000ed2 <HAL_TIM_IC_CaptureCallback+0x2a2>
		else if(flag == 1)
 8000cbc:	4b8c      	ldr	r3, [pc, #560]	; (8000ef0 <HAL_TIM_IC_CaptureCallback+0x2c0>)
 8000cbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cc2:	f04f 0200 	mov.w	r2, #0
 8000cc6:	4b8c      	ldr	r3, [pc, #560]	; (8000ef8 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 8000cc8:	f7ff fe66 	bl	8000998 <__aeabi_dcmpeq>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d100      	bne.n	8000cd4 <HAL_TIM_IC_CaptureCallback+0xa4>
}
 8000cd2:	e0fe      	b.n	8000ed2 <HAL_TIM_IC_CaptureCallback+0x2a2>
			b++;
 8000cd4:	4b8a      	ldr	r3, [pc, #552]	; (8000f00 <HAL_TIM_IC_CaptureCallback+0x2d0>)
 8000cd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cda:	f04f 0200 	mov.w	r2, #0
 8000cde:	4b86      	ldr	r3, [pc, #536]	; (8000ef8 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 8000ce0:	f7ff fa3c 	bl	800015c <__adddf3>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	4985      	ldr	r1, [pc, #532]	; (8000f00 <HAL_TIM_IC_CaptureCallback+0x2d0>)
 8000cea:	e9c1 2300 	strd	r2, r3, [r1]
			__HAL_TIM_SET_COUNTER(htim, 0);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	625a      	str	r2, [r3, #36]	; 0x24
			val2 = HAL_TIM_ReadCapturedValue(htim,TIM_CHANNEL_1);
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f002 fbd3 	bl	80034a4 <HAL_TIM_ReadCapturedValue>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff fb67 	bl	80003d4 <__aeabi_ui2d>
 8000d06:	4602      	mov	r2, r0
 8000d08:	460b      	mov	r3, r1
 8000d0a:	497e      	ldr	r1, [pc, #504]	; (8000f04 <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8000d0c:	e9c1 2300 	strd	r2, r3, [r1]
			if(val2 >= val1)
 8000d10:	4b7c      	ldr	r3, [pc, #496]	; (8000f04 <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8000d12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d16:	4b77      	ldr	r3, [pc, #476]	; (8000ef4 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8000d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d1c:	f7ff fe5a 	bl	80009d4 <__aeabi_dcmpge>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d011      	beq.n	8000d4a <HAL_TIM_IC_CaptureCallback+0x11a>
				diff = val2 - val1;
 8000d26:	4b77      	ldr	r3, [pc, #476]	; (8000f04 <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8000d28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d2c:	4b71      	ldr	r3, [pc, #452]	; (8000ef4 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8000d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d32:	f7ff fa11 	bl	8000158 <__aeabi_dsub>
 8000d36:	4602      	mov	r2, r0
 8000d38:	460b      	mov	r3, r1
 8000d3a:	4610      	mov	r0, r2
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	f7ff fe5d 	bl	80009fc <__aeabi_d2iz>
 8000d42:	4603      	mov	r3, r0
 8000d44:	4a70      	ldr	r2, [pc, #448]	; (8000f08 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8000d46:	6013      	str	r3, [r2, #0]
 8000d48:	e024      	b.n	8000d94 <HAL_TIM_IC_CaptureCallback+0x164>
			else if(val2< val1)
 8000d4a:	4b6e      	ldr	r3, [pc, #440]	; (8000f04 <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8000d4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d50:	4b68      	ldr	r3, [pc, #416]	; (8000ef4 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8000d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d56:	f7ff fe29 	bl	80009ac <__aeabi_dcmplt>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d019      	beq.n	8000d94 <HAL_TIM_IC_CaptureCallback+0x164>
				diff = 65535 - val1 + val2;
 8000d60:	4b64      	ldr	r3, [pc, #400]	; (8000ef4 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 8000d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d66:	a15e      	add	r1, pc, #376	; (adr r1, 8000ee0 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8000d68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000d6c:	f7ff f9f4 	bl	8000158 <__aeabi_dsub>
 8000d70:	4602      	mov	r2, r0
 8000d72:	460b      	mov	r3, r1
 8000d74:	4610      	mov	r0, r2
 8000d76:	4619      	mov	r1, r3
 8000d78:	4b62      	ldr	r3, [pc, #392]	; (8000f04 <HAL_TIM_IC_CaptureCallback+0x2d4>)
 8000d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d7e:	f7ff f9ed 	bl	800015c <__adddf3>
 8000d82:	4602      	mov	r2, r0
 8000d84:	460b      	mov	r3, r1
 8000d86:	4610      	mov	r0, r2
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f7ff fe37 	bl	80009fc <__aeabi_d2iz>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	4a5d      	ldr	r2, [pc, #372]	; (8000f08 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8000d92:	6013      	str	r3, [r2, #0]
			kc = diff*0.034/2;
 8000d94:	4b5c      	ldr	r3, [pc, #368]	; (8000f08 <HAL_TIM_IC_CaptureCallback+0x2d8>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fb2b 	bl	80003f4 <__aeabi_i2d>
 8000d9e:	a352      	add	r3, pc, #328	; (adr r3, 8000ee8 <HAL_TIM_IC_CaptureCallback+0x2b8>)
 8000da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000da4:	f7ff fb90 	bl	80004c8 <__aeabi_dmul>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4610      	mov	r0, r2
 8000dae:	4619      	mov	r1, r3
 8000db0:	f04f 0200 	mov.w	r2, #0
 8000db4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000db8:	f7ff fcb0 	bl	800071c <__aeabi_ddiv>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	4952      	ldr	r1, [pc, #328]	; (8000f0c <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8000dc2:	e9c1 2300 	strd	r2, r3, [r1]
			temp = kc*10;
 8000dc6:	4b51      	ldr	r3, [pc, #324]	; (8000f0c <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8000dc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000dcc:	f04f 0200 	mov.w	r2, #0
 8000dd0:	4b4f      	ldr	r3, [pc, #316]	; (8000f10 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 8000dd2:	f7ff fb79 	bl	80004c8 <__aeabi_dmul>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	460b      	mov	r3, r1
 8000dda:	4610      	mov	r0, r2
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f7ff fe0d 	bl	80009fc <__aeabi_d2iz>
 8000de2:	4603      	mov	r3, r0
 8000de4:	60fb      	str	r3, [r7, #12]
			LCD_GotoXY(1,10,(temp/100)+48);
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	4a4a      	ldr	r2, [pc, #296]	; (8000f14 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 8000dea:	fb82 1203 	smull	r1, r2, r2, r3
 8000dee:	1152      	asrs	r2, r2, #5
 8000df0:	17db      	asrs	r3, r3, #31
 8000df2:	1ad3      	subs	r3, r2, r3
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	3330      	adds	r3, #48	; 0x30
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	210a      	movs	r1, #10
 8000dfe:	2001      	movs	r0, #1
 8000e00:	f7ff fec1 	bl	8000b86 <LCD_GotoXY>
			LCD_GotoXY(1,11,((temp%100)/10)+48);
 8000e04:	68fa      	ldr	r2, [r7, #12]
 8000e06:	4b43      	ldr	r3, [pc, #268]	; (8000f14 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 8000e08:	fb83 1302 	smull	r1, r3, r3, r2
 8000e0c:	1159      	asrs	r1, r3, #5
 8000e0e:	17d3      	asrs	r3, r2, #31
 8000e10:	1acb      	subs	r3, r1, r3
 8000e12:	2164      	movs	r1, #100	; 0x64
 8000e14:	fb01 f303 	mul.w	r3, r1, r3
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	4a3f      	ldr	r2, [pc, #252]	; (8000f18 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 8000e1c:	fb82 1203 	smull	r1, r2, r2, r3
 8000e20:	1092      	asrs	r2, r2, #2
 8000e22:	17db      	asrs	r3, r3, #31
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	3330      	adds	r3, #48	; 0x30
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	210b      	movs	r1, #11
 8000e30:	2001      	movs	r0, #1
 8000e32:	f7ff fea8 	bl	8000b86 <LCD_GotoXY>
			LCD_GotoXY(1,12,0x2E);
 8000e36:	222e      	movs	r2, #46	; 0x2e
 8000e38:	210c      	movs	r1, #12
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	f7ff fea3 	bl	8000b86 <LCD_GotoXY>
			LCD_GotoXY(1,13,((temp%100)%10)+48);
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	4a34      	ldr	r2, [pc, #208]	; (8000f14 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 8000e44:	fb82 1203 	smull	r1, r2, r2, r3
 8000e48:	1151      	asrs	r1, r2, #5
 8000e4a:	17da      	asrs	r2, r3, #31
 8000e4c:	1a8a      	subs	r2, r1, r2
 8000e4e:	2164      	movs	r1, #100	; 0x64
 8000e50:	fb01 f202 	mul.w	r2, r1, r2
 8000e54:	1a9a      	subs	r2, r3, r2
 8000e56:	4b30      	ldr	r3, [pc, #192]	; (8000f18 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 8000e58:	fb83 1302 	smull	r1, r3, r3, r2
 8000e5c:	1099      	asrs	r1, r3, #2
 8000e5e:	17d3      	asrs	r3, r2, #31
 8000e60:	1ac9      	subs	r1, r1, r3
 8000e62:	460b      	mov	r3, r1
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	440b      	add	r3, r1
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	1ad1      	subs	r1, r2, r3
 8000e6c:	b2cb      	uxtb	r3, r1
 8000e6e:	3330      	adds	r3, #48	; 0x30
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	461a      	mov	r2, r3
 8000e74:	210d      	movs	r1, #13
 8000e76:	2001      	movs	r0, #1
 8000e78:	f7ff fe85 	bl	8000b86 <LCD_GotoXY>
			if(kc > 10)
 8000e7c:	4b23      	ldr	r3, [pc, #140]	; (8000f0c <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8000e7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e82:	f04f 0200 	mov.w	r2, #0
 8000e86:	4b22      	ldr	r3, [pc, #136]	; (8000f10 <HAL_TIM_IC_CaptureCallback+0x2e0>)
 8000e88:	f7ff fdae 	bl	80009e8 <__aeabi_dcmpgt>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d005      	beq.n	8000e9e <HAL_TIM_IC_CaptureCallback+0x26e>
				LCD_GotoXY_String(2,7,"SAFE");
 8000e92:	4a22      	ldr	r2, [pc, #136]	; (8000f1c <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8000e94:	2107      	movs	r1, #7
 8000e96:	2002      	movs	r0, #2
 8000e98:	f7ff feab 	bl	8000bf2 <LCD_GotoXY_String>
 8000e9c:	e004      	b.n	8000ea8 <HAL_TIM_IC_CaptureCallback+0x278>
				LCD_GotoXY_String(2,7,"STOP");
 8000e9e:	4a20      	ldr	r2, [pc, #128]	; (8000f20 <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8000ea0:	2107      	movs	r1, #7
 8000ea2:	2002      	movs	r0, #2
 8000ea4:	f7ff fea5 	bl	8000bf2 <LCD_GotoXY_String>
			flag = 0;
 8000ea8:	4911      	ldr	r1, [pc, #68]	; (8000ef0 <HAL_TIM_IC_CaptureCallback+0x2c0>)
 8000eaa:	f04f 0200 	mov.w	r2, #0
 8000eae:	f04f 0300 	mov.w	r3, #0
 8000eb2:	e9c1 2300 	strd	r2, r3, [r1]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_RISING);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	6a1a      	ldr	r2, [r3, #32]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f022 020a 	bic.w	r2, r2, #10
 8000ec4:	621a      	str	r2, [r3, #32]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	6a12      	ldr	r2, [r2, #32]
 8000ed0:	621a      	str	r2, [r3, #32]
}
 8000ed2:	bf00      	nop
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	f3af 8000 	nop.w
 8000ee0:	00000000 	.word	0x00000000
 8000ee4:	40efffe0 	.word	0x40efffe0
 8000ee8:	b020c49c 	.word	0xb020c49c
 8000eec:	3fa16872 	.word	0x3fa16872
 8000ef0:	20000118 	.word	0x20000118
 8000ef4:	20000120 	.word	0x20000120
 8000ef8:	3ff00000 	.word	0x3ff00000
 8000efc:	20000138 	.word	0x20000138
 8000f00:	20000140 	.word	0x20000140
 8000f04:	20000128 	.word	0x20000128
 8000f08:	20000148 	.word	0x20000148
 8000f0c:	20000130 	.word	0x20000130
 8000f10:	40240000 	.word	0x40240000
 8000f14:	51eb851f 	.word	0x51eb851f
 8000f18:	66666667 	.word	0x66666667
 8000f1c:	08003b18 	.word	0x08003b18
 8000f20:	08003b20 	.word	0x08003b20

08000f24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f28:	f000 fade 	bl	80014e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f2c:	f000 f834 	bl	8000f98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f30:	f000 f946 	bl	80011c0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f34:	f000 f8a4 	bl	8001080 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000f38:	f000 f874 	bl	8001024 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000f3c:	f000 f8f2 	bl	8001124 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1);
 8000f40:	2100      	movs	r1, #0
 8000f42:	4812      	ldr	r0, [pc, #72]	; (8000f8c <main+0x68>)
 8000f44:	f001 ff36 	bl	8002db4 <HAL_TIM_IC_Start_IT>
  LCD_Init();
 8000f48:	f7ff fde0 	bl	8000b0c <LCD_Init>
  LCD_String(distance);
 8000f4c:	4810      	ldr	r0, [pc, #64]	; (8000f90 <main+0x6c>)
 8000f4e:	f7ff fe3a 	bl	8000bc6 <LCD_String>
  LCD_GotoXY(1,15,'c');
 8000f52:	2263      	movs	r2, #99	; 0x63
 8000f54:	210f      	movs	r1, #15
 8000f56:	2001      	movs	r0, #1
 8000f58:	f7ff fe15 	bl	8000b86 <LCD_GotoXY>
  LCD_GotoXY(1,16,'m');
 8000f5c:	226d      	movs	r2, #109	; 0x6d
 8000f5e:	2110      	movs	r1, #16
 8000f60:	2001      	movs	r0, #1
 8000f62:	f7ff fe10 	bl	8000b86 <LCD_GotoXY>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);
 8000f66:	2201      	movs	r2, #1
 8000f68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f6c:	4809      	ldr	r0, [pc, #36]	; (8000f94 <main+0x70>)
 8000f6e:	f000 fdd3 	bl	8001b18 <HAL_GPIO_WritePin>
	  HAL_Delay(10);
 8000f72:	200a      	movs	r0, #10
 8000f74:	f000 fb1a 	bl	80015ac <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f7e:	4805      	ldr	r0, [pc, #20]	; (8000f94 <main+0x70>)
 8000f80:	f000 fdca 	bl	8001b18 <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 8000f84:	20c8      	movs	r0, #200	; 0xc8
 8000f86:	f000 fb11 	bl	80015ac <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);
 8000f8a:	e7ec      	b.n	8000f66 <main+0x42>
 8000f8c:	20000088 	.word	0x20000088
 8000f90:	20000000 	.word	0x20000000
 8000f94:	40010800 	.word	0x40010800

08000f98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b090      	sub	sp, #64	; 0x40
 8000f9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f9e:	f107 0318 	add.w	r3, r7, #24
 8000fa2:	2228      	movs	r2, #40	; 0x28
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f002 fd7e 	bl	8003aa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]
 8000fb4:	609a      	str	r2, [r3, #8]
 8000fb6:	60da      	str	r2, [r3, #12]
 8000fb8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fc2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fd4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fd6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000fda:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fdc:	f107 0318 	add.w	r3, r7, #24
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f001 fa4d 	bl	8002480 <HAL_RCC_OscConfig>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000fec:	f000 f934 	bl	8001258 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff0:	230f      	movs	r3, #15
 8000ff2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ffc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001000:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	2102      	movs	r1, #2
 800100a:	4618      	mov	r0, r3
 800100c:	f001 fcba 	bl	8002984 <HAL_RCC_ClockConfig>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001016:	f000 f91f 	bl	8001258 <Error_Handler>
  }
}
 800101a:	bf00      	nop
 800101c:	3740      	adds	r7, #64	; 0x40
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <MX_I2C1_Init+0x50>)
 800102a:	4a13      	ldr	r2, [pc, #76]	; (8001078 <MX_I2C1_Init+0x54>)
 800102c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800102e:	4b11      	ldr	r3, [pc, #68]	; (8001074 <MX_I2C1_Init+0x50>)
 8001030:	4a12      	ldr	r2, [pc, #72]	; (800107c <MX_I2C1_Init+0x58>)
 8001032:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <MX_I2C1_Init+0x50>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <MX_I2C1_Init+0x50>)
 800103c:	2200      	movs	r2, #0
 800103e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <MX_I2C1_Init+0x50>)
 8001042:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001046:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001048:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <MX_I2C1_Init+0x50>)
 800104a:	2200      	movs	r2, #0
 800104c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <MX_I2C1_Init+0x50>)
 8001050:	2200      	movs	r2, #0
 8001052:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001054:	4b07      	ldr	r3, [pc, #28]	; (8001074 <MX_I2C1_Init+0x50>)
 8001056:	2200      	movs	r2, #0
 8001058:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <MX_I2C1_Init+0x50>)
 800105c:	2200      	movs	r2, #0
 800105e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001060:	4804      	ldr	r0, [pc, #16]	; (8001074 <MX_I2C1_Init+0x50>)
 8001062:	f000 fd71 	bl	8001b48 <HAL_I2C_Init>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800106c:	f000 f8f4 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000034 	.word	0x20000034
 8001078:	40005400 	.word	0x40005400
 800107c:	000186a0 	.word	0x000186a0

08001080 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001086:	f107 0310 	add.w	r3, r7, #16
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001090:	463b      	mov	r3, r7
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800109c:	4b20      	ldr	r3, [pc, #128]	; (8001120 <MX_TIM2_Init+0xa0>)
 800109e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80010a4:	4b1e      	ldr	r3, [pc, #120]	; (8001120 <MX_TIM2_Init+0xa0>)
 80010a6:	2247      	movs	r2, #71	; 0x47
 80010a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010aa:	4b1d      	ldr	r3, [pc, #116]	; (8001120 <MX_TIM2_Init+0xa0>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80010b0:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <MX_TIM2_Init+0xa0>)
 80010b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b8:	4b19      	ldr	r3, [pc, #100]	; (8001120 <MX_TIM2_Init+0xa0>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010be:	4b18      	ldr	r3, [pc, #96]	; (8001120 <MX_TIM2_Init+0xa0>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80010c4:	4816      	ldr	r0, [pc, #88]	; (8001120 <MX_TIM2_Init+0xa0>)
 80010c6:	f001 fe26 	bl	8002d16 <HAL_TIM_IC_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010d0:	f000 f8c2 	bl	8001258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d4:	2300      	movs	r3, #0
 80010d6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010dc:	f107 0310 	add.w	r3, r7, #16
 80010e0:	4619      	mov	r1, r3
 80010e2:	480f      	ldr	r0, [pc, #60]	; (8001120 <MX_TIM2_Init+0xa0>)
 80010e4:	f002 fc70 	bl	80039c8 <HAL_TIMEx_MasterConfigSynchronization>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80010ee:	f000 f8b3 	bl	8001258 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010f2:	2300      	movs	r3, #0
 80010f4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010f6:	2301      	movs	r3, #1
 80010f8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001102:	463b      	mov	r3, r7
 8001104:	2200      	movs	r2, #0
 8001106:	4619      	mov	r1, r3
 8001108:	4805      	ldr	r0, [pc, #20]	; (8001120 <MX_TIM2_Init+0xa0>)
 800110a:	f002 f867 	bl	80031dc <HAL_TIM_IC_ConfigChannel>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001114:	f000 f8a0 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001118:	bf00      	nop
 800111a:	3718      	adds	r7, #24
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000088 	.word	0x20000088

08001124 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800112a:	f107 0308 	add.w	r3, r7, #8
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001138:	463b      	mov	r3, r7
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001140:	4b1d      	ldr	r3, [pc, #116]	; (80011b8 <MX_TIM3_Init+0x94>)
 8001142:	4a1e      	ldr	r2, [pc, #120]	; (80011bc <MX_TIM3_Init+0x98>)
 8001144:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8001146:	4b1c      	ldr	r3, [pc, #112]	; (80011b8 <MX_TIM3_Init+0x94>)
 8001148:	2207      	movs	r2, #7
 800114a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800114c:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <MX_TIM3_Init+0x94>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001152:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <MX_TIM3_Init+0x94>)
 8001154:	f242 720f 	movw	r2, #9999	; 0x270f
 8001158:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800115a:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <MX_TIM3_Init+0x94>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001160:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <MX_TIM3_Init+0x94>)
 8001162:	2200      	movs	r2, #0
 8001164:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001166:	4814      	ldr	r0, [pc, #80]	; (80011b8 <MX_TIM3_Init+0x94>)
 8001168:	f001 fd86 	bl	8002c78 <HAL_TIM_Base_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001172:	f000 f871 	bl	8001258 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001176:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800117a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800117c:	f107 0308 	add.w	r3, r7, #8
 8001180:	4619      	mov	r1, r3
 8001182:	480d      	ldr	r0, [pc, #52]	; (80011b8 <MX_TIM3_Init+0x94>)
 8001184:	f002 f8c6 	bl	8003314 <HAL_TIM_ConfigClockSource>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800118e:	f000 f863 	bl	8001258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001192:	2300      	movs	r3, #0
 8001194:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001196:	2300      	movs	r3, #0
 8001198:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800119a:	463b      	mov	r3, r7
 800119c:	4619      	mov	r1, r3
 800119e:	4806      	ldr	r0, [pc, #24]	; (80011b8 <MX_TIM3_Init+0x94>)
 80011a0:	f002 fc12 	bl	80039c8 <HAL_TIMEx_MasterConfigSynchronization>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80011aa:	f000 f855 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	3718      	adds	r7, #24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	200000d0 	.word	0x200000d0
 80011bc:	40000400 	.word	0x40000400

080011c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c6:	f107 0310 	add.w	r3, r7, #16
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011d4:	4b1e      	ldr	r3, [pc, #120]	; (8001250 <MX_GPIO_Init+0x90>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	4a1d      	ldr	r2, [pc, #116]	; (8001250 <MX_GPIO_Init+0x90>)
 80011da:	f043 0320 	orr.w	r3, r3, #32
 80011de:	6193      	str	r3, [r2, #24]
 80011e0:	4b1b      	ldr	r3, [pc, #108]	; (8001250 <MX_GPIO_Init+0x90>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	f003 0320 	and.w	r3, r3, #32
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ec:	4b18      	ldr	r3, [pc, #96]	; (8001250 <MX_GPIO_Init+0x90>)
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	4a17      	ldr	r2, [pc, #92]	; (8001250 <MX_GPIO_Init+0x90>)
 80011f2:	f043 0304 	orr.w	r3, r3, #4
 80011f6:	6193      	str	r3, [r2, #24]
 80011f8:	4b15      	ldr	r3, [pc, #84]	; (8001250 <MX_GPIO_Init+0x90>)
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	f003 0304 	and.w	r3, r3, #4
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001204:	4b12      	ldr	r3, [pc, #72]	; (8001250 <MX_GPIO_Init+0x90>)
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	4a11      	ldr	r2, [pc, #68]	; (8001250 <MX_GPIO_Init+0x90>)
 800120a:	f043 0308 	orr.w	r3, r3, #8
 800120e:	6193      	str	r3, [r2, #24]
 8001210:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <MX_GPIO_Init+0x90>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	f003 0308 	and.w	r3, r3, #8
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800121c:	2200      	movs	r2, #0
 800121e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001222:	480c      	ldr	r0, [pc, #48]	; (8001254 <MX_GPIO_Init+0x94>)
 8001224:	f000 fc78 	bl	8001b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001228:	f44f 7300 	mov.w	r3, #512	; 0x200
 800122c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122e:	2301      	movs	r3, #1
 8001230:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001236:	2302      	movs	r3, #2
 8001238:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123a:	f107 0310 	add.w	r3, r7, #16
 800123e:	4619      	mov	r1, r3
 8001240:	4804      	ldr	r0, [pc, #16]	; (8001254 <MX_GPIO_Init+0x94>)
 8001242:	f000 fae5 	bl	8001810 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001246:	bf00      	nop
 8001248:	3720      	adds	r7, #32
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40021000 	.word	0x40021000
 8001254:	40010800 	.word	0x40010800

08001258 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800125c:	b672      	cpsid	i
}
 800125e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001260:	e7fe      	b.n	8001260 <Error_Handler+0x8>
	...

08001264 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800126a:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <HAL_MspInit+0x5c>)
 800126c:	699b      	ldr	r3, [r3, #24]
 800126e:	4a14      	ldr	r2, [pc, #80]	; (80012c0 <HAL_MspInit+0x5c>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	6193      	str	r3, [r2, #24]
 8001276:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <HAL_MspInit+0x5c>)
 8001278:	699b      	ldr	r3, [r3, #24]
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001282:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <HAL_MspInit+0x5c>)
 8001284:	69db      	ldr	r3, [r3, #28]
 8001286:	4a0e      	ldr	r2, [pc, #56]	; (80012c0 <HAL_MspInit+0x5c>)
 8001288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800128c:	61d3      	str	r3, [r2, #28]
 800128e:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <HAL_MspInit+0x5c>)
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800129a:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <HAL_MspInit+0x60>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	4a04      	ldr	r2, [pc, #16]	; (80012c4 <HAL_MspInit+0x60>)
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012b6:	bf00      	nop
 80012b8:	3714      	adds	r7, #20
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr
 80012c0:	40021000 	.word	0x40021000
 80012c4:	40010000 	.word	0x40010000

080012c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	f107 0310 	add.w	r3, r7, #16
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a15      	ldr	r2, [pc, #84]	; (8001338 <HAL_I2C_MspInit+0x70>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d123      	bne.n	8001330 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e8:	4b14      	ldr	r3, [pc, #80]	; (800133c <HAL_I2C_MspInit+0x74>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	4a13      	ldr	r2, [pc, #76]	; (800133c <HAL_I2C_MspInit+0x74>)
 80012ee:	f043 0308 	orr.w	r3, r3, #8
 80012f2:	6193      	str	r3, [r2, #24]
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <HAL_I2C_MspInit+0x74>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	f003 0308 	and.w	r3, r3, #8
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001300:	23c0      	movs	r3, #192	; 0xc0
 8001302:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001304:	2312      	movs	r3, #18
 8001306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001308:	2303      	movs	r3, #3
 800130a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130c:	f107 0310 	add.w	r3, r7, #16
 8001310:	4619      	mov	r1, r3
 8001312:	480b      	ldr	r0, [pc, #44]	; (8001340 <HAL_I2C_MspInit+0x78>)
 8001314:	f000 fa7c 	bl	8001810 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001318:	4b08      	ldr	r3, [pc, #32]	; (800133c <HAL_I2C_MspInit+0x74>)
 800131a:	69db      	ldr	r3, [r3, #28]
 800131c:	4a07      	ldr	r2, [pc, #28]	; (800133c <HAL_I2C_MspInit+0x74>)
 800131e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001322:	61d3      	str	r3, [r2, #28]
 8001324:	4b05      	ldr	r3, [pc, #20]	; (800133c <HAL_I2C_MspInit+0x74>)
 8001326:	69db      	ldr	r3, [r3, #28]
 8001328:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001330:	bf00      	nop
 8001332:	3720      	adds	r7, #32
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40005400 	.word	0x40005400
 800133c:	40021000 	.word	0x40021000
 8001340:	40010c00 	.word	0x40010c00

08001344 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b088      	sub	sp, #32
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 0310 	add.w	r3, r7, #16
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM2)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001362:	d12b      	bne.n	80013bc <HAL_TIM_IC_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001364:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <HAL_TIM_IC_MspInit+0x80>)
 8001366:	69db      	ldr	r3, [r3, #28]
 8001368:	4a16      	ldr	r2, [pc, #88]	; (80013c4 <HAL_TIM_IC_MspInit+0x80>)
 800136a:	f043 0301 	orr.w	r3, r3, #1
 800136e:	61d3      	str	r3, [r2, #28]
 8001370:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <HAL_TIM_IC_MspInit+0x80>)
 8001372:	69db      	ldr	r3, [r3, #28]
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137c:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <HAL_TIM_IC_MspInit+0x80>)
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	4a10      	ldr	r2, [pc, #64]	; (80013c4 <HAL_TIM_IC_MspInit+0x80>)
 8001382:	f043 0304 	orr.w	r3, r3, #4
 8001386:	6193      	str	r3, [r2, #24]
 8001388:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <HAL_TIM_IC_MspInit+0x80>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	f003 0304 	and.w	r3, r3, #4
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001394:	2301      	movs	r3, #1
 8001396:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a0:	f107 0310 	add.w	r3, r7, #16
 80013a4:	4619      	mov	r1, r3
 80013a6:	4808      	ldr	r0, [pc, #32]	; (80013c8 <HAL_TIM_IC_MspInit+0x84>)
 80013a8:	f000 fa32 	bl	8001810 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013ac:	2200      	movs	r2, #0
 80013ae:	2100      	movs	r1, #0
 80013b0:	201c      	movs	r0, #28
 80013b2:	f000 f9f6 	bl	80017a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013b6:	201c      	movs	r0, #28
 80013b8:	f000 fa0f 	bl	80017da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013bc:	bf00      	nop
 80013be:	3720      	adds	r7, #32
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40010800 	.word	0x40010800

080013cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a0d      	ldr	r2, [pc, #52]	; (8001410 <HAL_TIM_Base_MspInit+0x44>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d113      	bne.n	8001406 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013de:	4b0d      	ldr	r3, [pc, #52]	; (8001414 <HAL_TIM_Base_MspInit+0x48>)
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	4a0c      	ldr	r2, [pc, #48]	; (8001414 <HAL_TIM_Base_MspInit+0x48>)
 80013e4:	f043 0302 	orr.w	r3, r3, #2
 80013e8:	61d3      	str	r3, [r2, #28]
 80013ea:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <HAL_TIM_Base_MspInit+0x48>)
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2101      	movs	r1, #1
 80013fa:	201d      	movs	r0, #29
 80013fc:	f000 f9d1 	bl	80017a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001400:	201d      	movs	r0, #29
 8001402:	f000 f9ea 	bl	80017da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001406:	bf00      	nop
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40000400 	.word	0x40000400
 8001414:	40021000 	.word	0x40021000

08001418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800141c:	e7fe      	b.n	800141c <NMI_Handler+0x4>

0800141e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001422:	e7fe      	b.n	8001422 <HardFault_Handler+0x4>

08001424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001428:	e7fe      	b.n	8001428 <MemManage_Handler+0x4>

0800142a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800142e:	e7fe      	b.n	800142e <BusFault_Handler+0x4>

08001430 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001434:	e7fe      	b.n	8001434 <UsageFault_Handler+0x4>

08001436 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr

08001442 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr

0800144e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr

0800145a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800145e:	f000 f889 	bl	8001574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800146c:	4802      	ldr	r0, [pc, #8]	; (8001478 <TIM2_IRQHandler+0x10>)
 800146e:	f001 fdad 	bl	8002fcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000088 	.word	0x20000088

0800147c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001480:	4802      	ldr	r0, [pc, #8]	; (800148c <TIM3_IRQHandler+0x10>)
 8001482:	f001 fda3 	bl	8002fcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	200000d0 	.word	0x200000d0

08001490 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr

0800149c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800149c:	f7ff fff8 	bl	8001490 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014a0:	480b      	ldr	r0, [pc, #44]	; (80014d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80014a2:	490c      	ldr	r1, [pc, #48]	; (80014d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80014a4:	4a0c      	ldr	r2, [pc, #48]	; (80014d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80014a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014a8:	e002      	b.n	80014b0 <LoopCopyDataInit>

080014aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ae:	3304      	adds	r3, #4

080014b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b4:	d3f9      	bcc.n	80014aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014b6:	4a09      	ldr	r2, [pc, #36]	; (80014dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014b8:	4c09      	ldr	r4, [pc, #36]	; (80014e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014bc:	e001      	b.n	80014c2 <LoopFillZerobss>

080014be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c0:	3204      	adds	r2, #4

080014c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c4:	d3fb      	bcc.n	80014be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014c6:	f002 faf7 	bl	8003ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014ca:	f7ff fd2b 	bl	8000f24 <main>
  bx lr
 80014ce:	4770      	bx	lr
  ldr r0, =_sdata
 80014d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014d4:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80014d8:	08003b5c 	.word	0x08003b5c
  ldr r2, =_sbss
 80014dc:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80014e0:	20000150 	.word	0x20000150

080014e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014e4:	e7fe      	b.n	80014e4 <ADC1_2_IRQHandler>
	...

080014e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014ec:	4b08      	ldr	r3, [pc, #32]	; (8001510 <HAL_Init+0x28>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a07      	ldr	r2, [pc, #28]	; (8001510 <HAL_Init+0x28>)
 80014f2:	f043 0310 	orr.w	r3, r3, #16
 80014f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014f8:	2003      	movs	r0, #3
 80014fa:	f000 f947 	bl	800178c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014fe:	200f      	movs	r0, #15
 8001500:	f000 f808 	bl	8001514 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001504:	f7ff feae 	bl	8001264 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40022000 	.word	0x40022000

08001514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800151c:	4b12      	ldr	r3, [pc, #72]	; (8001568 <HAL_InitTick+0x54>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	4b12      	ldr	r3, [pc, #72]	; (800156c <HAL_InitTick+0x58>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	4619      	mov	r1, r3
 8001526:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800152a:	fbb3 f3f1 	udiv	r3, r3, r1
 800152e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001532:	4618      	mov	r0, r3
 8001534:	f000 f95f 	bl	80017f6 <HAL_SYSTICK_Config>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e00e      	b.n	8001560 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2b0f      	cmp	r3, #15
 8001546:	d80a      	bhi.n	800155e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001548:	2200      	movs	r2, #0
 800154a:	6879      	ldr	r1, [r7, #4]
 800154c:	f04f 30ff 	mov.w	r0, #4294967295
 8001550:	f000 f927 	bl	80017a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001554:	4a06      	ldr	r2, [pc, #24]	; (8001570 <HAL_InitTick+0x5c>)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800155a:	2300      	movs	r3, #0
 800155c:	e000      	b.n	8001560 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
}
 8001560:	4618      	mov	r0, r3
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	2000000c 	.word	0x2000000c
 800156c:	20000014 	.word	0x20000014
 8001570:	20000010 	.word	0x20000010

08001574 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001578:	4b05      	ldr	r3, [pc, #20]	; (8001590 <HAL_IncTick+0x1c>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	461a      	mov	r2, r3
 800157e:	4b05      	ldr	r3, [pc, #20]	; (8001594 <HAL_IncTick+0x20>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4413      	add	r3, r2
 8001584:	4a03      	ldr	r2, [pc, #12]	; (8001594 <HAL_IncTick+0x20>)
 8001586:	6013      	str	r3, [r2, #0]
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr
 8001590:	20000014 	.word	0x20000014
 8001594:	2000014c 	.word	0x2000014c

08001598 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  return uwTick;
 800159c:	4b02      	ldr	r3, [pc, #8]	; (80015a8 <HAL_GetTick+0x10>)
 800159e:	681b      	ldr	r3, [r3, #0]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr
 80015a8:	2000014c 	.word	0x2000014c

080015ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015b4:	f7ff fff0 	bl	8001598 <HAL_GetTick>
 80015b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015c4:	d005      	beq.n	80015d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015c6:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <HAL_Delay+0x44>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	461a      	mov	r2, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	4413      	add	r3, r2
 80015d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015d2:	bf00      	nop
 80015d4:	f7ff ffe0 	bl	8001598 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d8f7      	bhi.n	80015d4 <HAL_Delay+0x28>
  {
  }
}
 80015e4:	bf00      	nop
 80015e6:	bf00      	nop
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000014 	.word	0x20000014

080015f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001604:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <__NVIC_SetPriorityGrouping+0x44>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800160a:	68ba      	ldr	r2, [r7, #8]
 800160c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001610:	4013      	ands	r3, r2
 8001612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800161c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001626:	4a04      	ldr	r2, [pc, #16]	; (8001638 <__NVIC_SetPriorityGrouping+0x44>)
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	60d3      	str	r3, [r2, #12]
}
 800162c:	bf00      	nop
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001640:	4b04      	ldr	r3, [pc, #16]	; (8001654 <__NVIC_GetPriorityGrouping+0x18>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	0a1b      	lsrs	r3, r3, #8
 8001646:	f003 0307 	and.w	r3, r3, #7
}
 800164a:	4618      	mov	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	bc80      	pop	{r7}
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001666:	2b00      	cmp	r3, #0
 8001668:	db0b      	blt.n	8001682 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	f003 021f 	and.w	r2, r3, #31
 8001670:	4906      	ldr	r1, [pc, #24]	; (800168c <__NVIC_EnableIRQ+0x34>)
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	095b      	lsrs	r3, r3, #5
 8001678:	2001      	movs	r0, #1
 800167a:	fa00 f202 	lsl.w	r2, r0, r2
 800167e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr
 800168c:	e000e100 	.word	0xe000e100

08001690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	6039      	str	r1, [r7, #0]
 800169a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800169c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	db0a      	blt.n	80016ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	490c      	ldr	r1, [pc, #48]	; (80016dc <__NVIC_SetPriority+0x4c>)
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ae:	0112      	lsls	r2, r2, #4
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	440b      	add	r3, r1
 80016b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016b8:	e00a      	b.n	80016d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	4908      	ldr	r1, [pc, #32]	; (80016e0 <__NVIC_SetPriority+0x50>)
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	f003 030f 	and.w	r3, r3, #15
 80016c6:	3b04      	subs	r3, #4
 80016c8:	0112      	lsls	r2, r2, #4
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	440b      	add	r3, r1
 80016ce:	761a      	strb	r2, [r3, #24]
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	e000e100 	.word	0xe000e100
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b089      	sub	sp, #36	; 0x24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f1c3 0307 	rsb	r3, r3, #7
 80016fe:	2b04      	cmp	r3, #4
 8001700:	bf28      	it	cs
 8001702:	2304      	movcs	r3, #4
 8001704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	3304      	adds	r3, #4
 800170a:	2b06      	cmp	r3, #6
 800170c:	d902      	bls.n	8001714 <NVIC_EncodePriority+0x30>
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	3b03      	subs	r3, #3
 8001712:	e000      	b.n	8001716 <NVIC_EncodePriority+0x32>
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001718:	f04f 32ff 	mov.w	r2, #4294967295
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43da      	mvns	r2, r3
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	401a      	ands	r2, r3
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800172c:	f04f 31ff 	mov.w	r1, #4294967295
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	fa01 f303 	lsl.w	r3, r1, r3
 8001736:	43d9      	mvns	r1, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800173c:	4313      	orrs	r3, r2
         );
}
 800173e:	4618      	mov	r0, r3
 8001740:	3724      	adds	r7, #36	; 0x24
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr

08001748 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	3b01      	subs	r3, #1
 8001754:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001758:	d301      	bcc.n	800175e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800175a:	2301      	movs	r3, #1
 800175c:	e00f      	b.n	800177e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800175e:	4a0a      	ldr	r2, [pc, #40]	; (8001788 <SysTick_Config+0x40>)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3b01      	subs	r3, #1
 8001764:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001766:	210f      	movs	r1, #15
 8001768:	f04f 30ff 	mov.w	r0, #4294967295
 800176c:	f7ff ff90 	bl	8001690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001770:	4b05      	ldr	r3, [pc, #20]	; (8001788 <SysTick_Config+0x40>)
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001776:	4b04      	ldr	r3, [pc, #16]	; (8001788 <SysTick_Config+0x40>)
 8001778:	2207      	movs	r2, #7
 800177a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	e000e010 	.word	0xe000e010

0800178c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7ff ff2d 	bl	80015f4 <__NVIC_SetPriorityGrouping>
}
 800179a:	bf00      	nop
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b086      	sub	sp, #24
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	4603      	mov	r3, r0
 80017aa:	60b9      	str	r1, [r7, #8]
 80017ac:	607a      	str	r2, [r7, #4]
 80017ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017b4:	f7ff ff42 	bl	800163c <__NVIC_GetPriorityGrouping>
 80017b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	68b9      	ldr	r1, [r7, #8]
 80017be:	6978      	ldr	r0, [r7, #20]
 80017c0:	f7ff ff90 	bl	80016e4 <NVIC_EncodePriority>
 80017c4:	4602      	mov	r2, r0
 80017c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ca:	4611      	mov	r1, r2
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff ff5f 	bl	8001690 <__NVIC_SetPriority>
}
 80017d2:	bf00      	nop
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b082      	sub	sp, #8
 80017de:	af00      	add	r7, sp, #0
 80017e0:	4603      	mov	r3, r0
 80017e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff ff35 	bl	8001658 <__NVIC_EnableIRQ>
}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b082      	sub	sp, #8
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff ffa2 	bl	8001748 <SysTick_Config>
 8001804:	4603      	mov	r3, r0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
	...

08001810 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001810:	b480      	push	{r7}
 8001812:	b08b      	sub	sp, #44	; 0x2c
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800181a:	2300      	movs	r3, #0
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800181e:	2300      	movs	r3, #0
 8001820:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001822:	e169      	b.n	8001af8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001824:	2201      	movs	r2, #1
 8001826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	69fa      	ldr	r2, [r7, #28]
 8001834:	4013      	ands	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	429a      	cmp	r2, r3
 800183e:	f040 8158 	bne.w	8001af2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	4a9a      	ldr	r2, [pc, #616]	; (8001ab0 <HAL_GPIO_Init+0x2a0>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d05e      	beq.n	800190a <HAL_GPIO_Init+0xfa>
 800184c:	4a98      	ldr	r2, [pc, #608]	; (8001ab0 <HAL_GPIO_Init+0x2a0>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d875      	bhi.n	800193e <HAL_GPIO_Init+0x12e>
 8001852:	4a98      	ldr	r2, [pc, #608]	; (8001ab4 <HAL_GPIO_Init+0x2a4>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d058      	beq.n	800190a <HAL_GPIO_Init+0xfa>
 8001858:	4a96      	ldr	r2, [pc, #600]	; (8001ab4 <HAL_GPIO_Init+0x2a4>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d86f      	bhi.n	800193e <HAL_GPIO_Init+0x12e>
 800185e:	4a96      	ldr	r2, [pc, #600]	; (8001ab8 <HAL_GPIO_Init+0x2a8>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d052      	beq.n	800190a <HAL_GPIO_Init+0xfa>
 8001864:	4a94      	ldr	r2, [pc, #592]	; (8001ab8 <HAL_GPIO_Init+0x2a8>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d869      	bhi.n	800193e <HAL_GPIO_Init+0x12e>
 800186a:	4a94      	ldr	r2, [pc, #592]	; (8001abc <HAL_GPIO_Init+0x2ac>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d04c      	beq.n	800190a <HAL_GPIO_Init+0xfa>
 8001870:	4a92      	ldr	r2, [pc, #584]	; (8001abc <HAL_GPIO_Init+0x2ac>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d863      	bhi.n	800193e <HAL_GPIO_Init+0x12e>
 8001876:	4a92      	ldr	r2, [pc, #584]	; (8001ac0 <HAL_GPIO_Init+0x2b0>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d046      	beq.n	800190a <HAL_GPIO_Init+0xfa>
 800187c:	4a90      	ldr	r2, [pc, #576]	; (8001ac0 <HAL_GPIO_Init+0x2b0>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d85d      	bhi.n	800193e <HAL_GPIO_Init+0x12e>
 8001882:	2b12      	cmp	r3, #18
 8001884:	d82a      	bhi.n	80018dc <HAL_GPIO_Init+0xcc>
 8001886:	2b12      	cmp	r3, #18
 8001888:	d859      	bhi.n	800193e <HAL_GPIO_Init+0x12e>
 800188a:	a201      	add	r2, pc, #4	; (adr r2, 8001890 <HAL_GPIO_Init+0x80>)
 800188c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001890:	0800190b 	.word	0x0800190b
 8001894:	080018e5 	.word	0x080018e5
 8001898:	080018f7 	.word	0x080018f7
 800189c:	08001939 	.word	0x08001939
 80018a0:	0800193f 	.word	0x0800193f
 80018a4:	0800193f 	.word	0x0800193f
 80018a8:	0800193f 	.word	0x0800193f
 80018ac:	0800193f 	.word	0x0800193f
 80018b0:	0800193f 	.word	0x0800193f
 80018b4:	0800193f 	.word	0x0800193f
 80018b8:	0800193f 	.word	0x0800193f
 80018bc:	0800193f 	.word	0x0800193f
 80018c0:	0800193f 	.word	0x0800193f
 80018c4:	0800193f 	.word	0x0800193f
 80018c8:	0800193f 	.word	0x0800193f
 80018cc:	0800193f 	.word	0x0800193f
 80018d0:	0800193f 	.word	0x0800193f
 80018d4:	080018ed 	.word	0x080018ed
 80018d8:	08001901 	.word	0x08001901
 80018dc:	4a79      	ldr	r2, [pc, #484]	; (8001ac4 <HAL_GPIO_Init+0x2b4>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d013      	beq.n	800190a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018e2:	e02c      	b.n	800193e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	623b      	str	r3, [r7, #32]
          break;
 80018ea:	e029      	b.n	8001940 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	3304      	adds	r3, #4
 80018f2:	623b      	str	r3, [r7, #32]
          break;
 80018f4:	e024      	b.n	8001940 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	3308      	adds	r3, #8
 80018fc:	623b      	str	r3, [r7, #32]
          break;
 80018fe:	e01f      	b.n	8001940 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	330c      	adds	r3, #12
 8001906:	623b      	str	r3, [r7, #32]
          break;
 8001908:	e01a      	b.n	8001940 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d102      	bne.n	8001918 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001912:	2304      	movs	r3, #4
 8001914:	623b      	str	r3, [r7, #32]
          break;
 8001916:	e013      	b.n	8001940 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d105      	bne.n	800192c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001920:	2308      	movs	r3, #8
 8001922:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	69fa      	ldr	r2, [r7, #28]
 8001928:	611a      	str	r2, [r3, #16]
          break;
 800192a:	e009      	b.n	8001940 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800192c:	2308      	movs	r3, #8
 800192e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	69fa      	ldr	r2, [r7, #28]
 8001934:	615a      	str	r2, [r3, #20]
          break;
 8001936:	e003      	b.n	8001940 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001938:	2300      	movs	r3, #0
 800193a:	623b      	str	r3, [r7, #32]
          break;
 800193c:	e000      	b.n	8001940 <HAL_GPIO_Init+0x130>
          break;
 800193e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	2bff      	cmp	r3, #255	; 0xff
 8001944:	d801      	bhi.n	800194a <HAL_GPIO_Init+0x13a>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	e001      	b.n	800194e <HAL_GPIO_Init+0x13e>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	3304      	adds	r3, #4
 800194e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	2bff      	cmp	r3, #255	; 0xff
 8001954:	d802      	bhi.n	800195c <HAL_GPIO_Init+0x14c>
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	e002      	b.n	8001962 <HAL_GPIO_Init+0x152>
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	3b08      	subs	r3, #8
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	210f      	movs	r1, #15
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	fa01 f303 	lsl.w	r3, r1, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	401a      	ands	r2, r3
 8001974:	6a39      	ldr	r1, [r7, #32]
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	fa01 f303 	lsl.w	r3, r1, r3
 800197c:	431a      	orrs	r2, r3
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198a:	2b00      	cmp	r3, #0
 800198c:	f000 80b1 	beq.w	8001af2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001990:	4b4d      	ldr	r3, [pc, #308]	; (8001ac8 <HAL_GPIO_Init+0x2b8>)
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	4a4c      	ldr	r2, [pc, #304]	; (8001ac8 <HAL_GPIO_Init+0x2b8>)
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	6193      	str	r3, [r2, #24]
 800199c:	4b4a      	ldr	r3, [pc, #296]	; (8001ac8 <HAL_GPIO_Init+0x2b8>)
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019a8:	4a48      	ldr	r2, [pc, #288]	; (8001acc <HAL_GPIO_Init+0x2bc>)
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	089b      	lsrs	r3, r3, #2
 80019ae:	3302      	adds	r3, #2
 80019b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b8:	f003 0303 	and.w	r3, r3, #3
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	220f      	movs	r2, #15
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	4013      	ands	r3, r2
 80019ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a40      	ldr	r2, [pc, #256]	; (8001ad0 <HAL_GPIO_Init+0x2c0>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d013      	beq.n	80019fc <HAL_GPIO_Init+0x1ec>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a3f      	ldr	r2, [pc, #252]	; (8001ad4 <HAL_GPIO_Init+0x2c4>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d00d      	beq.n	80019f8 <HAL_GPIO_Init+0x1e8>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a3e      	ldr	r2, [pc, #248]	; (8001ad8 <HAL_GPIO_Init+0x2c8>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d007      	beq.n	80019f4 <HAL_GPIO_Init+0x1e4>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a3d      	ldr	r2, [pc, #244]	; (8001adc <HAL_GPIO_Init+0x2cc>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d101      	bne.n	80019f0 <HAL_GPIO_Init+0x1e0>
 80019ec:	2303      	movs	r3, #3
 80019ee:	e006      	b.n	80019fe <HAL_GPIO_Init+0x1ee>
 80019f0:	2304      	movs	r3, #4
 80019f2:	e004      	b.n	80019fe <HAL_GPIO_Init+0x1ee>
 80019f4:	2302      	movs	r3, #2
 80019f6:	e002      	b.n	80019fe <HAL_GPIO_Init+0x1ee>
 80019f8:	2301      	movs	r3, #1
 80019fa:	e000      	b.n	80019fe <HAL_GPIO_Init+0x1ee>
 80019fc:	2300      	movs	r3, #0
 80019fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a00:	f002 0203 	and.w	r2, r2, #3
 8001a04:	0092      	lsls	r2, r2, #2
 8001a06:	4093      	lsls	r3, r2
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a0e:	492f      	ldr	r1, [pc, #188]	; (8001acc <HAL_GPIO_Init+0x2bc>)
 8001a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a12:	089b      	lsrs	r3, r3, #2
 8001a14:	3302      	adds	r3, #2
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d006      	beq.n	8001a36 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a28:	4b2d      	ldr	r3, [pc, #180]	; (8001ae0 <HAL_GPIO_Init+0x2d0>)
 8001a2a:	689a      	ldr	r2, [r3, #8]
 8001a2c:	492c      	ldr	r1, [pc, #176]	; (8001ae0 <HAL_GPIO_Init+0x2d0>)
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	608b      	str	r3, [r1, #8]
 8001a34:	e006      	b.n	8001a44 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a36:	4b2a      	ldr	r3, [pc, #168]	; (8001ae0 <HAL_GPIO_Init+0x2d0>)
 8001a38:	689a      	ldr	r2, [r3, #8]
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	4928      	ldr	r1, [pc, #160]	; (8001ae0 <HAL_GPIO_Init+0x2d0>)
 8001a40:	4013      	ands	r3, r2
 8001a42:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d006      	beq.n	8001a5e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a50:	4b23      	ldr	r3, [pc, #140]	; (8001ae0 <HAL_GPIO_Init+0x2d0>)
 8001a52:	68da      	ldr	r2, [r3, #12]
 8001a54:	4922      	ldr	r1, [pc, #136]	; (8001ae0 <HAL_GPIO_Init+0x2d0>)
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	60cb      	str	r3, [r1, #12]
 8001a5c:	e006      	b.n	8001a6c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a5e:	4b20      	ldr	r3, [pc, #128]	; (8001ae0 <HAL_GPIO_Init+0x2d0>)
 8001a60:	68da      	ldr	r2, [r3, #12]
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	43db      	mvns	r3, r3
 8001a66:	491e      	ldr	r1, [pc, #120]	; (8001ae0 <HAL_GPIO_Init+0x2d0>)
 8001a68:	4013      	ands	r3, r2
 8001a6a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d006      	beq.n	8001a86 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a78:	4b19      	ldr	r3, [pc, #100]	; (8001ae0 <HAL_GPIO_Init+0x2d0>)
 8001a7a:	685a      	ldr	r2, [r3, #4]
 8001a7c:	4918      	ldr	r1, [pc, #96]	; (8001ae0 <HAL_GPIO_Init+0x2d0>)
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	604b      	str	r3, [r1, #4]
 8001a84:	e006      	b.n	8001a94 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a86:	4b16      	ldr	r3, [pc, #88]	; (8001ae0 <HAL_GPIO_Init+0x2d0>)
 8001a88:	685a      	ldr	r2, [r3, #4]
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	4914      	ldr	r1, [pc, #80]	; (8001ae0 <HAL_GPIO_Init+0x2d0>)
 8001a90:	4013      	ands	r3, r2
 8001a92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d021      	beq.n	8001ae4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001aa0:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <HAL_GPIO_Init+0x2d0>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	490e      	ldr	r1, [pc, #56]	; (8001ae0 <HAL_GPIO_Init+0x2d0>)
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	600b      	str	r3, [r1, #0]
 8001aac:	e021      	b.n	8001af2 <HAL_GPIO_Init+0x2e2>
 8001aae:	bf00      	nop
 8001ab0:	10320000 	.word	0x10320000
 8001ab4:	10310000 	.word	0x10310000
 8001ab8:	10220000 	.word	0x10220000
 8001abc:	10210000 	.word	0x10210000
 8001ac0:	10120000 	.word	0x10120000
 8001ac4:	10110000 	.word	0x10110000
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	40010000 	.word	0x40010000
 8001ad0:	40010800 	.word	0x40010800
 8001ad4:	40010c00 	.word	0x40010c00
 8001ad8:	40011000 	.word	0x40011000
 8001adc:	40011400 	.word	0x40011400
 8001ae0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ae4:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <HAL_GPIO_Init+0x304>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	43db      	mvns	r3, r3
 8001aec:	4909      	ldr	r1, [pc, #36]	; (8001b14 <HAL_GPIO_Init+0x304>)
 8001aee:	4013      	ands	r3, r2
 8001af0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	3301      	adds	r3, #1
 8001af6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afe:	fa22 f303 	lsr.w	r3, r2, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f47f ae8e 	bne.w	8001824 <HAL_GPIO_Init+0x14>
  }
}
 8001b08:	bf00      	nop
 8001b0a:	bf00      	nop
 8001b0c:	372c      	adds	r7, #44	; 0x2c
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr
 8001b14:	40010400 	.word	0x40010400

08001b18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	460b      	mov	r3, r1
 8001b22:	807b      	strh	r3, [r7, #2]
 8001b24:	4613      	mov	r3, r2
 8001b26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b28:	787b      	ldrb	r3, [r7, #1]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b2e:	887a      	ldrh	r2, [r7, #2]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b34:	e003      	b.n	8001b3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b36:	887b      	ldrh	r3, [r7, #2]
 8001b38:	041a      	lsls	r2, r3, #16
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	611a      	str	r2, [r3, #16]
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr

08001b48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e12b      	b.n	8001db2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d106      	bne.n	8001b74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7ff fbaa 	bl	80012c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2224      	movs	r2, #36	; 0x24
 8001b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f022 0201 	bic.w	r2, r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001baa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001bac:	f001 f832 	bl	8002c14 <HAL_RCC_GetPCLK1Freq>
 8001bb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	4a81      	ldr	r2, [pc, #516]	; (8001dbc <HAL_I2C_Init+0x274>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d807      	bhi.n	8001bcc <HAL_I2C_Init+0x84>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4a80      	ldr	r2, [pc, #512]	; (8001dc0 <HAL_I2C_Init+0x278>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	bf94      	ite	ls
 8001bc4:	2301      	movls	r3, #1
 8001bc6:	2300      	movhi	r3, #0
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	e006      	b.n	8001bda <HAL_I2C_Init+0x92>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	4a7d      	ldr	r2, [pc, #500]	; (8001dc4 <HAL_I2C_Init+0x27c>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	bf94      	ite	ls
 8001bd4:	2301      	movls	r3, #1
 8001bd6:	2300      	movhi	r3, #0
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e0e7      	b.n	8001db2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	4a78      	ldr	r2, [pc, #480]	; (8001dc8 <HAL_I2C_Init+0x280>)
 8001be6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bea:	0c9b      	lsrs	r3, r3, #18
 8001bec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68ba      	ldr	r2, [r7, #8]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6a1b      	ldr	r3, [r3, #32]
 8001c08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	4a6a      	ldr	r2, [pc, #424]	; (8001dbc <HAL_I2C_Init+0x274>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d802      	bhi.n	8001c1c <HAL_I2C_Init+0xd4>
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	e009      	b.n	8001c30 <HAL_I2C_Init+0xe8>
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c22:	fb02 f303 	mul.w	r3, r2, r3
 8001c26:	4a69      	ldr	r2, [pc, #420]	; (8001dcc <HAL_I2C_Init+0x284>)
 8001c28:	fba2 2303 	umull	r2, r3, r2, r3
 8001c2c:	099b      	lsrs	r3, r3, #6
 8001c2e:	3301      	adds	r3, #1
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	6812      	ldr	r2, [r2, #0]
 8001c34:	430b      	orrs	r3, r1
 8001c36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	495c      	ldr	r1, [pc, #368]	; (8001dbc <HAL_I2C_Init+0x274>)
 8001c4c:	428b      	cmp	r3, r1
 8001c4e:	d819      	bhi.n	8001c84 <HAL_I2C_Init+0x13c>
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	1e59      	subs	r1, r3, #1
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c5e:	1c59      	adds	r1, r3, #1
 8001c60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c64:	400b      	ands	r3, r1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00a      	beq.n	8001c80 <HAL_I2C_Init+0x138>
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	1e59      	subs	r1, r3, #1
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c78:	3301      	adds	r3, #1
 8001c7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c7e:	e051      	b.n	8001d24 <HAL_I2C_Init+0x1dc>
 8001c80:	2304      	movs	r3, #4
 8001c82:	e04f      	b.n	8001d24 <HAL_I2C_Init+0x1dc>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d111      	bne.n	8001cb0 <HAL_I2C_Init+0x168>
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	1e58      	subs	r0, r3, #1
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6859      	ldr	r1, [r3, #4]
 8001c94:	460b      	mov	r3, r1
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	440b      	add	r3, r1
 8001c9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	bf0c      	ite	eq
 8001ca8:	2301      	moveq	r3, #1
 8001caa:	2300      	movne	r3, #0
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	e012      	b.n	8001cd6 <HAL_I2C_Init+0x18e>
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	1e58      	subs	r0, r3, #1
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6859      	ldr	r1, [r3, #4]
 8001cb8:	460b      	mov	r3, r1
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	440b      	add	r3, r1
 8001cbe:	0099      	lsls	r1, r3, #2
 8001cc0:	440b      	add	r3, r1
 8001cc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	bf0c      	ite	eq
 8001cd0:	2301      	moveq	r3, #1
 8001cd2:	2300      	movne	r3, #0
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <HAL_I2C_Init+0x196>
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e022      	b.n	8001d24 <HAL_I2C_Init+0x1dc>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d10e      	bne.n	8001d04 <HAL_I2C_Init+0x1bc>
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	1e58      	subs	r0, r3, #1
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6859      	ldr	r1, [r3, #4]
 8001cee:	460b      	mov	r3, r1
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	440b      	add	r3, r1
 8001cf4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d02:	e00f      	b.n	8001d24 <HAL_I2C_Init+0x1dc>
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	1e58      	subs	r0, r3, #1
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6859      	ldr	r1, [r3, #4]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	440b      	add	r3, r1
 8001d12:	0099      	lsls	r1, r3, #2
 8001d14:	440b      	add	r3, r1
 8001d16:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d24:	6879      	ldr	r1, [r7, #4]
 8001d26:	6809      	ldr	r1, [r1, #0]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	69da      	ldr	r2, [r3, #28]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a1b      	ldr	r3, [r3, #32]
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	430a      	orrs	r2, r1
 8001d46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	6911      	ldr	r1, [r2, #16]
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	68d2      	ldr	r2, [r2, #12]
 8001d5e:	4311      	orrs	r1, r2
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	6812      	ldr	r2, [r2, #0]
 8001d64:	430b      	orrs	r3, r1
 8001d66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	695a      	ldr	r2, [r3, #20]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	430a      	orrs	r2, r1
 8001d82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f042 0201 	orr.w	r2, r2, #1
 8001d92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2220      	movs	r2, #32
 8001d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	000186a0 	.word	0x000186a0
 8001dc0:	001e847f 	.word	0x001e847f
 8001dc4:	003d08ff 	.word	0x003d08ff
 8001dc8:	431bde83 	.word	0x431bde83
 8001dcc:	10624dd3 	.word	0x10624dd3

08001dd0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b088      	sub	sp, #32
 8001dd4:	af02      	add	r7, sp, #8
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	607a      	str	r2, [r7, #4]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	460b      	mov	r3, r1
 8001dde:	817b      	strh	r3, [r7, #10]
 8001de0:	4613      	mov	r3, r2
 8001de2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001de4:	f7ff fbd8 	bl	8001598 <HAL_GetTick>
 8001de8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b20      	cmp	r3, #32
 8001df4:	f040 80e0 	bne.w	8001fb8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	2319      	movs	r3, #25
 8001dfe:	2201      	movs	r2, #1
 8001e00:	4970      	ldr	r1, [pc, #448]	; (8001fc4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f000 f964 	bl	80020d0 <I2C_WaitOnFlagUntilTimeout>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	e0d3      	b.n	8001fba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d101      	bne.n	8001e20 <HAL_I2C_Master_Transmit+0x50>
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	e0cc      	b.n	8001fba <HAL_I2C_Master_Transmit+0x1ea>
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d007      	beq.n	8001e46 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f042 0201 	orr.w	r2, r2, #1
 8001e44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e54:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2221      	movs	r2, #33	; 0x21
 8001e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2210      	movs	r2, #16
 8001e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	893a      	ldrh	r2, [r7, #8]
 8001e76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	4a50      	ldr	r2, [pc, #320]	; (8001fc8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001e86:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e88:	8979      	ldrh	r1, [r7, #10]
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	6a3a      	ldr	r2, [r7, #32]
 8001e8e:	68f8      	ldr	r0, [r7, #12]
 8001e90:	f000 f89c 	bl	8001fcc <I2C_MasterRequestWrite>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e08d      	b.n	8001fba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	695b      	ldr	r3, [r3, #20]
 8001ea8:	613b      	str	r3, [r7, #16]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	613b      	str	r3, [r7, #16]
 8001eb2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001eb4:	e066      	b.n	8001f84 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	6a39      	ldr	r1, [r7, #32]
 8001eba:	68f8      	ldr	r0, [r7, #12]
 8001ebc:	f000 fa22 	bl	8002304 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00d      	beq.n	8001ee2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	2b04      	cmp	r3, #4
 8001ecc:	d107      	bne.n	8001ede <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001edc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e06b      	b.n	8001fba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee6:	781a      	ldrb	r2, [r3, #0]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef2:	1c5a      	adds	r2, r3, #1
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	3b01      	subs	r3, #1
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	695b      	ldr	r3, [r3, #20]
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	2b04      	cmp	r3, #4
 8001f1e:	d11b      	bne.n	8001f58 <HAL_I2C_Master_Transmit+0x188>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d017      	beq.n	8001f58 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2c:	781a      	ldrb	r2, [r3, #0]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f38:	1c5a      	adds	r2, r3, #1
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	3b01      	subs	r3, #1
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f50:	3b01      	subs	r3, #1
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	6a39      	ldr	r1, [r7, #32]
 8001f5c:	68f8      	ldr	r0, [r7, #12]
 8001f5e:	f000 fa19 	bl	8002394 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00d      	beq.n	8001f84 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6c:	2b04      	cmp	r3, #4
 8001f6e:	d107      	bne.n	8001f80 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f7e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e01a      	b.n	8001fba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d194      	bne.n	8001eb6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2220      	movs	r2, #32
 8001fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	e000      	b.n	8001fba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001fb8:	2302      	movs	r3, #2
  }
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	00100002 	.word	0x00100002
 8001fc8:	ffff0000 	.word	0xffff0000

08001fcc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b088      	sub	sp, #32
 8001fd0:	af02      	add	r7, sp, #8
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	607a      	str	r2, [r7, #4]
 8001fd6:	603b      	str	r3, [r7, #0]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	2b08      	cmp	r3, #8
 8001fe6:	d006      	beq.n	8001ff6 <I2C_MasterRequestWrite+0x2a>
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d003      	beq.n	8001ff6 <I2C_MasterRequestWrite+0x2a>
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ff4:	d108      	bne.n	8002008 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	e00b      	b.n	8002020 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200c:	2b12      	cmp	r3, #18
 800200e:	d107      	bne.n	8002020 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800201e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	9300      	str	r3, [sp, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800202c:	68f8      	ldr	r0, [r7, #12]
 800202e:	f000 f84f 	bl	80020d0 <I2C_WaitOnFlagUntilTimeout>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00d      	beq.n	8002054 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002042:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002046:	d103      	bne.n	8002050 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800204e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e035      	b.n	80020c0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800205c:	d108      	bne.n	8002070 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800205e:	897b      	ldrh	r3, [r7, #10]
 8002060:	b2db      	uxtb	r3, r3
 8002062:	461a      	mov	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800206c:	611a      	str	r2, [r3, #16]
 800206e:	e01b      	b.n	80020a8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002070:	897b      	ldrh	r3, [r7, #10]
 8002072:	11db      	asrs	r3, r3, #7
 8002074:	b2db      	uxtb	r3, r3
 8002076:	f003 0306 	and.w	r3, r3, #6
 800207a:	b2db      	uxtb	r3, r3
 800207c:	f063 030f 	orn	r3, r3, #15
 8002080:	b2da      	uxtb	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	490e      	ldr	r1, [pc, #56]	; (80020c8 <I2C_MasterRequestWrite+0xfc>)
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f000 f898 	bl	80021c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e010      	b.n	80020c0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800209e:	897b      	ldrh	r3, [r7, #10]
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	4907      	ldr	r1, [pc, #28]	; (80020cc <I2C_MasterRequestWrite+0x100>)
 80020ae:	68f8      	ldr	r0, [r7, #12]
 80020b0:	f000 f888 	bl	80021c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e000      	b.n	80020c0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3718      	adds	r7, #24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	00010008 	.word	0x00010008
 80020cc:	00010002 	.word	0x00010002

080020d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	603b      	str	r3, [r7, #0]
 80020dc:	4613      	mov	r3, r2
 80020de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020e0:	e048      	b.n	8002174 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e8:	d044      	beq.n	8002174 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020ea:	f7ff fa55 	bl	8001598 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d302      	bcc.n	8002100 <I2C_WaitOnFlagUntilTimeout+0x30>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d139      	bne.n	8002174 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	0c1b      	lsrs	r3, r3, #16
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b01      	cmp	r3, #1
 8002108:	d10d      	bne.n	8002126 <I2C_WaitOnFlagUntilTimeout+0x56>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	695b      	ldr	r3, [r3, #20]
 8002110:	43da      	mvns	r2, r3
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	4013      	ands	r3, r2
 8002116:	b29b      	uxth	r3, r3
 8002118:	2b00      	cmp	r3, #0
 800211a:	bf0c      	ite	eq
 800211c:	2301      	moveq	r3, #1
 800211e:	2300      	movne	r3, #0
 8002120:	b2db      	uxtb	r3, r3
 8002122:	461a      	mov	r2, r3
 8002124:	e00c      	b.n	8002140 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	43da      	mvns	r2, r3
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	4013      	ands	r3, r2
 8002132:	b29b      	uxth	r3, r3
 8002134:	2b00      	cmp	r3, #0
 8002136:	bf0c      	ite	eq
 8002138:	2301      	moveq	r3, #1
 800213a:	2300      	movne	r3, #0
 800213c:	b2db      	uxtb	r3, r3
 800213e:	461a      	mov	r2, r3
 8002140:	79fb      	ldrb	r3, [r7, #7]
 8002142:	429a      	cmp	r2, r3
 8002144:	d116      	bne.n	8002174 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2200      	movs	r2, #0
 800214a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2220      	movs	r2, #32
 8002150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	f043 0220 	orr.w	r2, r3, #32
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e023      	b.n	80021bc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	0c1b      	lsrs	r3, r3, #16
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b01      	cmp	r3, #1
 800217c:	d10d      	bne.n	800219a <I2C_WaitOnFlagUntilTimeout+0xca>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	695b      	ldr	r3, [r3, #20]
 8002184:	43da      	mvns	r2, r3
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	4013      	ands	r3, r2
 800218a:	b29b      	uxth	r3, r3
 800218c:	2b00      	cmp	r3, #0
 800218e:	bf0c      	ite	eq
 8002190:	2301      	moveq	r3, #1
 8002192:	2300      	movne	r3, #0
 8002194:	b2db      	uxtb	r3, r3
 8002196:	461a      	mov	r2, r3
 8002198:	e00c      	b.n	80021b4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	43da      	mvns	r2, r3
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	4013      	ands	r3, r2
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	bf0c      	ite	eq
 80021ac:	2301      	moveq	r3, #1
 80021ae:	2300      	movne	r3, #0
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	461a      	mov	r2, r3
 80021b4:	79fb      	ldrb	r3, [r7, #7]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d093      	beq.n	80020e2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3710      	adds	r7, #16
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
 80021d0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021d2:	e071      	b.n	80022b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021e2:	d123      	bne.n	800222c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021f2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2220      	movs	r2, #32
 8002208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002218:	f043 0204 	orr.w	r2, r3, #4
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e067      	b.n	80022fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002232:	d041      	beq.n	80022b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002234:	f7ff f9b0 	bl	8001598 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	429a      	cmp	r2, r3
 8002242:	d302      	bcc.n	800224a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d136      	bne.n	80022b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	0c1b      	lsrs	r3, r3, #16
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b01      	cmp	r3, #1
 8002252:	d10c      	bne.n	800226e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	43da      	mvns	r2, r3
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	4013      	ands	r3, r2
 8002260:	b29b      	uxth	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	bf14      	ite	ne
 8002266:	2301      	movne	r3, #1
 8002268:	2300      	moveq	r3, #0
 800226a:	b2db      	uxtb	r3, r3
 800226c:	e00b      	b.n	8002286 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	43da      	mvns	r2, r3
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	4013      	ands	r3, r2
 800227a:	b29b      	uxth	r3, r3
 800227c:	2b00      	cmp	r3, #0
 800227e:	bf14      	ite	ne
 8002280:	2301      	movne	r3, #1
 8002282:	2300      	moveq	r3, #0
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d016      	beq.n	80022b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2220      	movs	r2, #32
 8002294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a4:	f043 0220 	orr.w	r2, r3, #32
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e021      	b.n	80022fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	0c1b      	lsrs	r3, r3, #16
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d10c      	bne.n	80022dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	43da      	mvns	r2, r3
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	4013      	ands	r3, r2
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	bf14      	ite	ne
 80022d4:	2301      	movne	r3, #1
 80022d6:	2300      	moveq	r3, #0
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	e00b      	b.n	80022f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	43da      	mvns	r2, r3
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	4013      	ands	r3, r2
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	bf14      	ite	ne
 80022ee:	2301      	movne	r3, #1
 80022f0:	2300      	moveq	r3, #0
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f47f af6d 	bne.w	80021d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002310:	e034      	b.n	800237c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f000 f886 	bl	8002424 <I2C_IsAcknowledgeFailed>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e034      	b.n	800238c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002328:	d028      	beq.n	800237c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800232a:	f7ff f935 	bl	8001598 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	68ba      	ldr	r2, [r7, #8]
 8002336:	429a      	cmp	r2, r3
 8002338:	d302      	bcc.n	8002340 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d11d      	bne.n	800237c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800234a:	2b80      	cmp	r3, #128	; 0x80
 800234c:	d016      	beq.n	800237c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2220      	movs	r2, #32
 8002358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	f043 0220 	orr.w	r2, r3, #32
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e007      	b.n	800238c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002386:	2b80      	cmp	r3, #128	; 0x80
 8002388:	d1c3      	bne.n	8002312 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023a0:	e034      	b.n	800240c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f000 f83e 	bl	8002424 <I2C_IsAcknowledgeFailed>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e034      	b.n	800241c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b8:	d028      	beq.n	800240c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023ba:	f7ff f8ed 	bl	8001598 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	68ba      	ldr	r2, [r7, #8]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d302      	bcc.n	80023d0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d11d      	bne.n	800240c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	f003 0304 	and.w	r3, r3, #4
 80023da:	2b04      	cmp	r3, #4
 80023dc:	d016      	beq.n	800240c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2220      	movs	r2, #32
 80023e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f8:	f043 0220 	orr.w	r2, r3, #32
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e007      	b.n	800241c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	f003 0304 	and.w	r3, r3, #4
 8002416:	2b04      	cmp	r3, #4
 8002418:	d1c3      	bne.n	80023a2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002436:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800243a:	d11b      	bne.n	8002474 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002444:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2220      	movs	r2, #32
 8002450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002460:	f043 0204 	orr.w	r2, r3, #4
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e000      	b.n	8002476 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr

08002480 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e272      	b.n	8002978 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	f000 8087 	beq.w	80025ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024a0:	4b92      	ldr	r3, [pc, #584]	; (80026ec <HAL_RCC_OscConfig+0x26c>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f003 030c 	and.w	r3, r3, #12
 80024a8:	2b04      	cmp	r3, #4
 80024aa:	d00c      	beq.n	80024c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024ac:	4b8f      	ldr	r3, [pc, #572]	; (80026ec <HAL_RCC_OscConfig+0x26c>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f003 030c 	and.w	r3, r3, #12
 80024b4:	2b08      	cmp	r3, #8
 80024b6:	d112      	bne.n	80024de <HAL_RCC_OscConfig+0x5e>
 80024b8:	4b8c      	ldr	r3, [pc, #560]	; (80026ec <HAL_RCC_OscConfig+0x26c>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c4:	d10b      	bne.n	80024de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c6:	4b89      	ldr	r3, [pc, #548]	; (80026ec <HAL_RCC_OscConfig+0x26c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d06c      	beq.n	80025ac <HAL_RCC_OscConfig+0x12c>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d168      	bne.n	80025ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e24c      	b.n	8002978 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e6:	d106      	bne.n	80024f6 <HAL_RCC_OscConfig+0x76>
 80024e8:	4b80      	ldr	r3, [pc, #512]	; (80026ec <HAL_RCC_OscConfig+0x26c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a7f      	ldr	r2, [pc, #508]	; (80026ec <HAL_RCC_OscConfig+0x26c>)
 80024ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f2:	6013      	str	r3, [r2, #0]
 80024f4:	e02e      	b.n	8002554 <HAL_RCC_OscConfig+0xd4>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10c      	bne.n	8002518 <HAL_RCC_OscConfig+0x98>
 80024fe:	4b7b      	ldr	r3, [pc, #492]	; (80026ec <HAL_RCC_OscConfig+0x26c>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a7a      	ldr	r2, [pc, #488]	; (80026ec <HAL_RCC_OscConfig+0x26c>)
 8002504:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	4b78      	ldr	r3, [pc, #480]	; (80026ec <HAL_RCC_OscConfig+0x26c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a77      	ldr	r2, [pc, #476]	; (80026ec <HAL_RCC_OscConfig+0x26c>)
 8002510:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	e01d      	b.n	8002554 <HAL_RCC_OscConfig+0xd4>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002520:	d10c      	bne.n	800253c <HAL_RCC_OscConfig+0xbc>
 8002522:	4b72      	ldr	r3, [pc, #456]	; (80026ec <HAL_RCC_OscConfig+0x26c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a71      	ldr	r2, [pc, #452]	; (80026ec <HAL_RCC_OscConfig+0x26c>)
 8002528:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	4b6f      	ldr	r3, [pc, #444]	; (80026ec <HAL_RCC_OscConfig+0x26c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a6e      	ldr	r2, [pc, #440]	; (80026ec <HAL_RCC_OscConfig+0x26c>)
 8002534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	e00b      	b.n	8002554 <HAL_RCC_OscConfig+0xd4>
 800253c:	4b6b      	ldr	r3, [pc, #428]	; (80026ec <HAL_RCC_OscConfig+0x26c>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a6a      	ldr	r2, [pc, #424]	; (80026ec <HAL_RCC_OscConfig+0x26c>)
 8002542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002546:	6013      	str	r3, [r2, #0]
 8002548:	4b68      	ldr	r3, [pc, #416]	; (80026ec <HAL_RCC_OscConfig+0x26c>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a67      	ldr	r2, [pc, #412]	; (80026ec <HAL_RCC_OscConfig+0x26c>)
 800254e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002552:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d013      	beq.n	8002584 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255c:	f7ff f81c 	bl	8001598 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002564:	f7ff f818 	bl	8001598 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b64      	cmp	r3, #100	; 0x64
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e200      	b.n	8002978 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002576:	4b5d      	ldr	r3, [pc, #372]	; (80026ec <HAL_RCC_OscConfig+0x26c>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d0f0      	beq.n	8002564 <HAL_RCC_OscConfig+0xe4>
 8002582:	e014      	b.n	80025ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002584:	f7ff f808 	bl	8001598 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800258c:	f7ff f804 	bl	8001598 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b64      	cmp	r3, #100	; 0x64
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e1ec      	b.n	8002978 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800259e:	4b53      	ldr	r3, [pc, #332]	; (80026ec <HAL_RCC_OscConfig+0x26c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1f0      	bne.n	800258c <HAL_RCC_OscConfig+0x10c>
 80025aa:	e000      	b.n	80025ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d063      	beq.n	8002682 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025ba:	4b4c      	ldr	r3, [pc, #304]	; (80026ec <HAL_RCC_OscConfig+0x26c>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f003 030c 	and.w	r3, r3, #12
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00b      	beq.n	80025de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025c6:	4b49      	ldr	r3, [pc, #292]	; (80026ec <HAL_RCC_OscConfig+0x26c>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f003 030c 	and.w	r3, r3, #12
 80025ce:	2b08      	cmp	r3, #8
 80025d0:	d11c      	bne.n	800260c <HAL_RCC_OscConfig+0x18c>
 80025d2:	4b46      	ldr	r3, [pc, #280]	; (80026ec <HAL_RCC_OscConfig+0x26c>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d116      	bne.n	800260c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025de:	4b43      	ldr	r3, [pc, #268]	; (80026ec <HAL_RCC_OscConfig+0x26c>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d005      	beq.n	80025f6 <HAL_RCC_OscConfig+0x176>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d001      	beq.n	80025f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e1c0      	b.n	8002978 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f6:	4b3d      	ldr	r3, [pc, #244]	; (80026ec <HAL_RCC_OscConfig+0x26c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	4939      	ldr	r1, [pc, #228]	; (80026ec <HAL_RCC_OscConfig+0x26c>)
 8002606:	4313      	orrs	r3, r2
 8002608:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800260a:	e03a      	b.n	8002682 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d020      	beq.n	8002656 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002614:	4b36      	ldr	r3, [pc, #216]	; (80026f0 <HAL_RCC_OscConfig+0x270>)
 8002616:	2201      	movs	r2, #1
 8002618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261a:	f7fe ffbd 	bl	8001598 <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002620:	e008      	b.n	8002634 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002622:	f7fe ffb9 	bl	8001598 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e1a1      	b.n	8002978 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002634:	4b2d      	ldr	r3, [pc, #180]	; (80026ec <HAL_RCC_OscConfig+0x26c>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0f0      	beq.n	8002622 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002640:	4b2a      	ldr	r3, [pc, #168]	; (80026ec <HAL_RCC_OscConfig+0x26c>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	4927      	ldr	r1, [pc, #156]	; (80026ec <HAL_RCC_OscConfig+0x26c>)
 8002650:	4313      	orrs	r3, r2
 8002652:	600b      	str	r3, [r1, #0]
 8002654:	e015      	b.n	8002682 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002656:	4b26      	ldr	r3, [pc, #152]	; (80026f0 <HAL_RCC_OscConfig+0x270>)
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265c:	f7fe ff9c 	bl	8001598 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002664:	f7fe ff98 	bl	8001598 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e180      	b.n	8002978 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002676:	4b1d      	ldr	r3, [pc, #116]	; (80026ec <HAL_RCC_OscConfig+0x26c>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1f0      	bne.n	8002664 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0308 	and.w	r3, r3, #8
 800268a:	2b00      	cmp	r3, #0
 800268c:	d03a      	beq.n	8002704 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d019      	beq.n	80026ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002696:	4b17      	ldr	r3, [pc, #92]	; (80026f4 <HAL_RCC_OscConfig+0x274>)
 8002698:	2201      	movs	r2, #1
 800269a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800269c:	f7fe ff7c 	bl	8001598 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026a4:	f7fe ff78 	bl	8001598 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e160      	b.n	8002978 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026b6:	4b0d      	ldr	r3, [pc, #52]	; (80026ec <HAL_RCC_OscConfig+0x26c>)
 80026b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0f0      	beq.n	80026a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026c2:	2001      	movs	r0, #1
 80026c4:	f000 faba 	bl	8002c3c <RCC_Delay>
 80026c8:	e01c      	b.n	8002704 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026ca:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <HAL_RCC_OscConfig+0x274>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d0:	f7fe ff62 	bl	8001598 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d6:	e00f      	b.n	80026f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026d8:	f7fe ff5e 	bl	8001598 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d908      	bls.n	80026f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e146      	b.n	8002978 <HAL_RCC_OscConfig+0x4f8>
 80026ea:	bf00      	nop
 80026ec:	40021000 	.word	0x40021000
 80026f0:	42420000 	.word	0x42420000
 80026f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f8:	4b92      	ldr	r3, [pc, #584]	; (8002944 <HAL_RCC_OscConfig+0x4c4>)
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1e9      	bne.n	80026d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 80a6 	beq.w	800285e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002712:	2300      	movs	r3, #0
 8002714:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002716:	4b8b      	ldr	r3, [pc, #556]	; (8002944 <HAL_RCC_OscConfig+0x4c4>)
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10d      	bne.n	800273e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002722:	4b88      	ldr	r3, [pc, #544]	; (8002944 <HAL_RCC_OscConfig+0x4c4>)
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	4a87      	ldr	r2, [pc, #540]	; (8002944 <HAL_RCC_OscConfig+0x4c4>)
 8002728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800272c:	61d3      	str	r3, [r2, #28]
 800272e:	4b85      	ldr	r3, [pc, #532]	; (8002944 <HAL_RCC_OscConfig+0x4c4>)
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002736:	60bb      	str	r3, [r7, #8]
 8002738:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800273a:	2301      	movs	r3, #1
 800273c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800273e:	4b82      	ldr	r3, [pc, #520]	; (8002948 <HAL_RCC_OscConfig+0x4c8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002746:	2b00      	cmp	r3, #0
 8002748:	d118      	bne.n	800277c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800274a:	4b7f      	ldr	r3, [pc, #508]	; (8002948 <HAL_RCC_OscConfig+0x4c8>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a7e      	ldr	r2, [pc, #504]	; (8002948 <HAL_RCC_OscConfig+0x4c8>)
 8002750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002754:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002756:	f7fe ff1f 	bl	8001598 <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800275e:	f7fe ff1b 	bl	8001598 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b64      	cmp	r3, #100	; 0x64
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e103      	b.n	8002978 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002770:	4b75      	ldr	r3, [pc, #468]	; (8002948 <HAL_RCC_OscConfig+0x4c8>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0f0      	beq.n	800275e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d106      	bne.n	8002792 <HAL_RCC_OscConfig+0x312>
 8002784:	4b6f      	ldr	r3, [pc, #444]	; (8002944 <HAL_RCC_OscConfig+0x4c4>)
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	4a6e      	ldr	r2, [pc, #440]	; (8002944 <HAL_RCC_OscConfig+0x4c4>)
 800278a:	f043 0301 	orr.w	r3, r3, #1
 800278e:	6213      	str	r3, [r2, #32]
 8002790:	e02d      	b.n	80027ee <HAL_RCC_OscConfig+0x36e>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10c      	bne.n	80027b4 <HAL_RCC_OscConfig+0x334>
 800279a:	4b6a      	ldr	r3, [pc, #424]	; (8002944 <HAL_RCC_OscConfig+0x4c4>)
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	4a69      	ldr	r2, [pc, #420]	; (8002944 <HAL_RCC_OscConfig+0x4c4>)
 80027a0:	f023 0301 	bic.w	r3, r3, #1
 80027a4:	6213      	str	r3, [r2, #32]
 80027a6:	4b67      	ldr	r3, [pc, #412]	; (8002944 <HAL_RCC_OscConfig+0x4c4>)
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	4a66      	ldr	r2, [pc, #408]	; (8002944 <HAL_RCC_OscConfig+0x4c4>)
 80027ac:	f023 0304 	bic.w	r3, r3, #4
 80027b0:	6213      	str	r3, [r2, #32]
 80027b2:	e01c      	b.n	80027ee <HAL_RCC_OscConfig+0x36e>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	2b05      	cmp	r3, #5
 80027ba:	d10c      	bne.n	80027d6 <HAL_RCC_OscConfig+0x356>
 80027bc:	4b61      	ldr	r3, [pc, #388]	; (8002944 <HAL_RCC_OscConfig+0x4c4>)
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	4a60      	ldr	r2, [pc, #384]	; (8002944 <HAL_RCC_OscConfig+0x4c4>)
 80027c2:	f043 0304 	orr.w	r3, r3, #4
 80027c6:	6213      	str	r3, [r2, #32]
 80027c8:	4b5e      	ldr	r3, [pc, #376]	; (8002944 <HAL_RCC_OscConfig+0x4c4>)
 80027ca:	6a1b      	ldr	r3, [r3, #32]
 80027cc:	4a5d      	ldr	r2, [pc, #372]	; (8002944 <HAL_RCC_OscConfig+0x4c4>)
 80027ce:	f043 0301 	orr.w	r3, r3, #1
 80027d2:	6213      	str	r3, [r2, #32]
 80027d4:	e00b      	b.n	80027ee <HAL_RCC_OscConfig+0x36e>
 80027d6:	4b5b      	ldr	r3, [pc, #364]	; (8002944 <HAL_RCC_OscConfig+0x4c4>)
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	4a5a      	ldr	r2, [pc, #360]	; (8002944 <HAL_RCC_OscConfig+0x4c4>)
 80027dc:	f023 0301 	bic.w	r3, r3, #1
 80027e0:	6213      	str	r3, [r2, #32]
 80027e2:	4b58      	ldr	r3, [pc, #352]	; (8002944 <HAL_RCC_OscConfig+0x4c4>)
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	4a57      	ldr	r2, [pc, #348]	; (8002944 <HAL_RCC_OscConfig+0x4c4>)
 80027e8:	f023 0304 	bic.w	r3, r3, #4
 80027ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d015      	beq.n	8002822 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f6:	f7fe fecf 	bl	8001598 <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027fc:	e00a      	b.n	8002814 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027fe:	f7fe fecb 	bl	8001598 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	f241 3288 	movw	r2, #5000	; 0x1388
 800280c:	4293      	cmp	r3, r2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e0b1      	b.n	8002978 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002814:	4b4b      	ldr	r3, [pc, #300]	; (8002944 <HAL_RCC_OscConfig+0x4c4>)
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0ee      	beq.n	80027fe <HAL_RCC_OscConfig+0x37e>
 8002820:	e014      	b.n	800284c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002822:	f7fe feb9 	bl	8001598 <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002828:	e00a      	b.n	8002840 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800282a:	f7fe feb5 	bl	8001598 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	f241 3288 	movw	r2, #5000	; 0x1388
 8002838:	4293      	cmp	r3, r2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e09b      	b.n	8002978 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002840:	4b40      	ldr	r3, [pc, #256]	; (8002944 <HAL_RCC_OscConfig+0x4c4>)
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1ee      	bne.n	800282a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800284c:	7dfb      	ldrb	r3, [r7, #23]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d105      	bne.n	800285e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002852:	4b3c      	ldr	r3, [pc, #240]	; (8002944 <HAL_RCC_OscConfig+0x4c4>)
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	4a3b      	ldr	r2, [pc, #236]	; (8002944 <HAL_RCC_OscConfig+0x4c4>)
 8002858:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800285c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 8087 	beq.w	8002976 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002868:	4b36      	ldr	r3, [pc, #216]	; (8002944 <HAL_RCC_OscConfig+0x4c4>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f003 030c 	and.w	r3, r3, #12
 8002870:	2b08      	cmp	r3, #8
 8002872:	d061      	beq.n	8002938 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	69db      	ldr	r3, [r3, #28]
 8002878:	2b02      	cmp	r3, #2
 800287a:	d146      	bne.n	800290a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800287c:	4b33      	ldr	r3, [pc, #204]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 800287e:	2200      	movs	r2, #0
 8002880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002882:	f7fe fe89 	bl	8001598 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800288a:	f7fe fe85 	bl	8001598 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e06d      	b.n	8002978 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800289c:	4b29      	ldr	r3, [pc, #164]	; (8002944 <HAL_RCC_OscConfig+0x4c4>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1f0      	bne.n	800288a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028b0:	d108      	bne.n	80028c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028b2:	4b24      	ldr	r3, [pc, #144]	; (8002944 <HAL_RCC_OscConfig+0x4c4>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	4921      	ldr	r1, [pc, #132]	; (8002944 <HAL_RCC_OscConfig+0x4c4>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028c4:	4b1f      	ldr	r3, [pc, #124]	; (8002944 <HAL_RCC_OscConfig+0x4c4>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a19      	ldr	r1, [r3, #32]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	430b      	orrs	r3, r1
 80028d6:	491b      	ldr	r1, [pc, #108]	; (8002944 <HAL_RCC_OscConfig+0x4c4>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028dc:	4b1b      	ldr	r3, [pc, #108]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 80028de:	2201      	movs	r2, #1
 80028e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e2:	f7fe fe59 	bl	8001598 <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ea:	f7fe fe55 	bl	8001598 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e03d      	b.n	8002978 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028fc:	4b11      	ldr	r3, [pc, #68]	; (8002944 <HAL_RCC_OscConfig+0x4c4>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0f0      	beq.n	80028ea <HAL_RCC_OscConfig+0x46a>
 8002908:	e035      	b.n	8002976 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800290a:	4b10      	ldr	r3, [pc, #64]	; (800294c <HAL_RCC_OscConfig+0x4cc>)
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002910:	f7fe fe42 	bl	8001598 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002918:	f7fe fe3e 	bl	8001598 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e026      	b.n	8002978 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800292a:	4b06      	ldr	r3, [pc, #24]	; (8002944 <HAL_RCC_OscConfig+0x4c4>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1f0      	bne.n	8002918 <HAL_RCC_OscConfig+0x498>
 8002936:	e01e      	b.n	8002976 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	69db      	ldr	r3, [r3, #28]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d107      	bne.n	8002950 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e019      	b.n	8002978 <HAL_RCC_OscConfig+0x4f8>
 8002944:	40021000 	.word	0x40021000
 8002948:	40007000 	.word	0x40007000
 800294c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002950:	4b0b      	ldr	r3, [pc, #44]	; (8002980 <HAL_RCC_OscConfig+0x500>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	429a      	cmp	r2, r3
 8002962:	d106      	bne.n	8002972 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800296e:	429a      	cmp	r2, r3
 8002970:	d001      	beq.n	8002976 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e000      	b.n	8002978 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3718      	adds	r7, #24
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40021000 	.word	0x40021000

08002984 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e0d0      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002998:	4b6a      	ldr	r3, [pc, #424]	; (8002b44 <HAL_RCC_ClockConfig+0x1c0>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d910      	bls.n	80029c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a6:	4b67      	ldr	r3, [pc, #412]	; (8002b44 <HAL_RCC_ClockConfig+0x1c0>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f023 0207 	bic.w	r2, r3, #7
 80029ae:	4965      	ldr	r1, [pc, #404]	; (8002b44 <HAL_RCC_ClockConfig+0x1c0>)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b6:	4b63      	ldr	r3, [pc, #396]	; (8002b44 <HAL_RCC_ClockConfig+0x1c0>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d001      	beq.n	80029c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e0b8      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d020      	beq.n	8002a16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d005      	beq.n	80029ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029e0:	4b59      	ldr	r3, [pc, #356]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	4a58      	ldr	r2, [pc, #352]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 80029e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0308 	and.w	r3, r3, #8
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d005      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029f8:	4b53      	ldr	r3, [pc, #332]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	4a52      	ldr	r2, [pc, #328]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 80029fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a04:	4b50      	ldr	r3, [pc, #320]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	494d      	ldr	r1, [pc, #308]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d040      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d107      	bne.n	8002a3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a2a:	4b47      	ldr	r3, [pc, #284]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d115      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e07f      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d107      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a42:	4b41      	ldr	r3, [pc, #260]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d109      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e073      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a52:	4b3d      	ldr	r3, [pc, #244]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e06b      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a62:	4b39      	ldr	r3, [pc, #228]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f023 0203 	bic.w	r2, r3, #3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	4936      	ldr	r1, [pc, #216]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a74:	f7fe fd90 	bl	8001598 <HAL_GetTick>
 8002a78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a7a:	e00a      	b.n	8002a92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a7c:	f7fe fd8c 	bl	8001598 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e053      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a92:	4b2d      	ldr	r3, [pc, #180]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f003 020c 	and.w	r2, r3, #12
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d1eb      	bne.n	8002a7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002aa4:	4b27      	ldr	r3, [pc, #156]	; (8002b44 <HAL_RCC_ClockConfig+0x1c0>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d210      	bcs.n	8002ad4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab2:	4b24      	ldr	r3, [pc, #144]	; (8002b44 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f023 0207 	bic.w	r2, r3, #7
 8002aba:	4922      	ldr	r1, [pc, #136]	; (8002b44 <HAL_RCC_ClockConfig+0x1c0>)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ac2:	4b20      	ldr	r3, [pc, #128]	; (8002b44 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0307 	and.w	r3, r3, #7
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d001      	beq.n	8002ad4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e032      	b.n	8002b3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d008      	beq.n	8002af2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ae0:	4b19      	ldr	r3, [pc, #100]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	4916      	ldr	r1, [pc, #88]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0308 	and.w	r3, r3, #8
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d009      	beq.n	8002b12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002afe:	4b12      	ldr	r3, [pc, #72]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	490e      	ldr	r1, [pc, #56]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b12:	f000 f821 	bl	8002b58 <HAL_RCC_GetSysClockFreq>
 8002b16:	4602      	mov	r2, r0
 8002b18:	4b0b      	ldr	r3, [pc, #44]	; (8002b48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	091b      	lsrs	r3, r3, #4
 8002b1e:	f003 030f 	and.w	r3, r3, #15
 8002b22:	490a      	ldr	r1, [pc, #40]	; (8002b4c <HAL_RCC_ClockConfig+0x1c8>)
 8002b24:	5ccb      	ldrb	r3, [r1, r3]
 8002b26:	fa22 f303 	lsr.w	r3, r2, r3
 8002b2a:	4a09      	ldr	r2, [pc, #36]	; (8002b50 <HAL_RCC_ClockConfig+0x1cc>)
 8002b2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b2e:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <HAL_RCC_ClockConfig+0x1d0>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7fe fcee 	bl	8001514 <HAL_InitTick>

  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	40022000 	.word	0x40022000
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	08003b28 	.word	0x08003b28
 8002b50:	2000000c 	.word	0x2000000c
 8002b54:	20000010 	.word	0x20000010

08002b58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b087      	sub	sp, #28
 8002b5c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	2300      	movs	r3, #0
 8002b64:	60bb      	str	r3, [r7, #8]
 8002b66:	2300      	movs	r3, #0
 8002b68:	617b      	str	r3, [r7, #20]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b72:	4b1e      	ldr	r3, [pc, #120]	; (8002bec <HAL_RCC_GetSysClockFreq+0x94>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f003 030c 	and.w	r3, r3, #12
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d002      	beq.n	8002b88 <HAL_RCC_GetSysClockFreq+0x30>
 8002b82:	2b08      	cmp	r3, #8
 8002b84:	d003      	beq.n	8002b8e <HAL_RCC_GetSysClockFreq+0x36>
 8002b86:	e027      	b.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b88:	4b19      	ldr	r3, [pc, #100]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b8a:	613b      	str	r3, [r7, #16]
      break;
 8002b8c:	e027      	b.n	8002bde <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	0c9b      	lsrs	r3, r3, #18
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	4a17      	ldr	r2, [pc, #92]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b98:	5cd3      	ldrb	r3, [r2, r3]
 8002b9a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d010      	beq.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ba6:	4b11      	ldr	r3, [pc, #68]	; (8002bec <HAL_RCC_GetSysClockFreq+0x94>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	0c5b      	lsrs	r3, r3, #17
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	4a11      	ldr	r2, [pc, #68]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002bb2:	5cd3      	ldrb	r3, [r2, r3]
 8002bb4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a0d      	ldr	r2, [pc, #52]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bba:	fb03 f202 	mul.w	r2, r3, r2
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc4:	617b      	str	r3, [r7, #20]
 8002bc6:	e004      	b.n	8002bd2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a0c      	ldr	r2, [pc, #48]	; (8002bfc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002bcc:	fb02 f303 	mul.w	r3, r2, r3
 8002bd0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	613b      	str	r3, [r7, #16]
      break;
 8002bd6:	e002      	b.n	8002bde <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bd8:	4b05      	ldr	r3, [pc, #20]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bda:	613b      	str	r3, [r7, #16]
      break;
 8002bdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bde:	693b      	ldr	r3, [r7, #16]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	371c      	adds	r7, #28
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bc80      	pop	{r7}
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	007a1200 	.word	0x007a1200
 8002bf4:	08003b40 	.word	0x08003b40
 8002bf8:	08003b50 	.word	0x08003b50
 8002bfc:	003d0900 	.word	0x003d0900

08002c00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c04:	4b02      	ldr	r3, [pc, #8]	; (8002c10 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c06:	681b      	ldr	r3, [r3, #0]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr
 8002c10:	2000000c 	.word	0x2000000c

08002c14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c18:	f7ff fff2 	bl	8002c00 <HAL_RCC_GetHCLKFreq>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	4b05      	ldr	r3, [pc, #20]	; (8002c34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	0a1b      	lsrs	r3, r3, #8
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	4903      	ldr	r1, [pc, #12]	; (8002c38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c2a:	5ccb      	ldrb	r3, [r1, r3]
 8002c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40021000 	.word	0x40021000
 8002c38:	08003b38 	.word	0x08003b38

08002c3c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c44:	4b0a      	ldr	r3, [pc, #40]	; (8002c70 <RCC_Delay+0x34>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a0a      	ldr	r2, [pc, #40]	; (8002c74 <RCC_Delay+0x38>)
 8002c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4e:	0a5b      	lsrs	r3, r3, #9
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	fb02 f303 	mul.w	r3, r2, r3
 8002c56:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c58:	bf00      	nop
  }
  while (Delay --);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	1e5a      	subs	r2, r3, #1
 8002c5e:	60fa      	str	r2, [r7, #12]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1f9      	bne.n	8002c58 <RCC_Delay+0x1c>
}
 8002c64:	bf00      	nop
 8002c66:	bf00      	nop
 8002c68:	3714      	adds	r7, #20
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bc80      	pop	{r7}
 8002c6e:	4770      	bx	lr
 8002c70:	2000000c 	.word	0x2000000c
 8002c74:	10624dd3 	.word	0x10624dd3

08002c78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e041      	b.n	8002d0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d106      	bne.n	8002ca4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7fe fb94 	bl	80013cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3304      	adds	r3, #4
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4610      	mov	r0, r2
 8002cb8:	f000 fc5c 	bl	8003574 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b082      	sub	sp, #8
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d101      	bne.n	8002d28 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e041      	b.n	8002dac <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d106      	bne.n	8002d42 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f7fe fb01 	bl	8001344 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2202      	movs	r2, #2
 8002d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	3304      	adds	r3, #4
 8002d52:	4619      	mov	r1, r3
 8002d54:	4610      	mov	r0, r2
 8002d56:	f000 fc0d 	bl	8003574 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2201      	movs	r2, #1
 8002d96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3708      	adds	r7, #8
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d104      	bne.n	8002dd2 <HAL_TIM_IC_Start_IT+0x1e>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	e013      	b.n	8002dfa <HAL_TIM_IC_Start_IT+0x46>
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	d104      	bne.n	8002de2 <HAL_TIM_IC_Start_IT+0x2e>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	e00b      	b.n	8002dfa <HAL_TIM_IC_Start_IT+0x46>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	2b08      	cmp	r3, #8
 8002de6:	d104      	bne.n	8002df2 <HAL_TIM_IC_Start_IT+0x3e>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	e003      	b.n	8002dfa <HAL_TIM_IC_Start_IT+0x46>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d104      	bne.n	8002e0c <HAL_TIM_IC_Start_IT+0x58>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	e013      	b.n	8002e34 <HAL_TIM_IC_Start_IT+0x80>
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	2b04      	cmp	r3, #4
 8002e10:	d104      	bne.n	8002e1c <HAL_TIM_IC_Start_IT+0x68>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	e00b      	b.n	8002e34 <HAL_TIM_IC_Start_IT+0x80>
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	2b08      	cmp	r3, #8
 8002e20:	d104      	bne.n	8002e2c <HAL_TIM_IC_Start_IT+0x78>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	e003      	b.n	8002e34 <HAL_TIM_IC_Start_IT+0x80>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e36:	7bbb      	ldrb	r3, [r7, #14]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d102      	bne.n	8002e42 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002e3c:	7b7b      	ldrb	r3, [r7, #13]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d001      	beq.n	8002e46 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e0b8      	b.n	8002fb8 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d104      	bne.n	8002e56 <HAL_TIM_IC_Start_IT+0xa2>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e54:	e013      	b.n	8002e7e <HAL_TIM_IC_Start_IT+0xca>
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	2b04      	cmp	r3, #4
 8002e5a:	d104      	bne.n	8002e66 <HAL_TIM_IC_Start_IT+0xb2>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2202      	movs	r2, #2
 8002e60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e64:	e00b      	b.n	8002e7e <HAL_TIM_IC_Start_IT+0xca>
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	2b08      	cmp	r3, #8
 8002e6a:	d104      	bne.n	8002e76 <HAL_TIM_IC_Start_IT+0xc2>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e74:	e003      	b.n	8002e7e <HAL_TIM_IC_Start_IT+0xca>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2202      	movs	r2, #2
 8002e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d104      	bne.n	8002e8e <HAL_TIM_IC_Start_IT+0xda>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2202      	movs	r2, #2
 8002e88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e8c:	e013      	b.n	8002eb6 <HAL_TIM_IC_Start_IT+0x102>
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	2b04      	cmp	r3, #4
 8002e92:	d104      	bne.n	8002e9e <HAL_TIM_IC_Start_IT+0xea>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2202      	movs	r2, #2
 8002e98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e9c:	e00b      	b.n	8002eb6 <HAL_TIM_IC_Start_IT+0x102>
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	2b08      	cmp	r3, #8
 8002ea2:	d104      	bne.n	8002eae <HAL_TIM_IC_Start_IT+0xfa>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002eac:	e003      	b.n	8002eb6 <HAL_TIM_IC_Start_IT+0x102>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2202      	movs	r2, #2
 8002eb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	2b0c      	cmp	r3, #12
 8002eba:	d841      	bhi.n	8002f40 <HAL_TIM_IC_Start_IT+0x18c>
 8002ebc:	a201      	add	r2, pc, #4	; (adr r2, 8002ec4 <HAL_TIM_IC_Start_IT+0x110>)
 8002ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec2:	bf00      	nop
 8002ec4:	08002ef9 	.word	0x08002ef9
 8002ec8:	08002f41 	.word	0x08002f41
 8002ecc:	08002f41 	.word	0x08002f41
 8002ed0:	08002f41 	.word	0x08002f41
 8002ed4:	08002f0b 	.word	0x08002f0b
 8002ed8:	08002f41 	.word	0x08002f41
 8002edc:	08002f41 	.word	0x08002f41
 8002ee0:	08002f41 	.word	0x08002f41
 8002ee4:	08002f1d 	.word	0x08002f1d
 8002ee8:	08002f41 	.word	0x08002f41
 8002eec:	08002f41 	.word	0x08002f41
 8002ef0:	08002f41 	.word	0x08002f41
 8002ef4:	08002f2f 	.word	0x08002f2f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68da      	ldr	r2, [r3, #12]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0202 	orr.w	r2, r2, #2
 8002f06:	60da      	str	r2, [r3, #12]
      break;
 8002f08:	e01d      	b.n	8002f46 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68da      	ldr	r2, [r3, #12]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f042 0204 	orr.w	r2, r2, #4
 8002f18:	60da      	str	r2, [r3, #12]
      break;
 8002f1a:	e014      	b.n	8002f46 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68da      	ldr	r2, [r3, #12]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 0208 	orr.w	r2, r2, #8
 8002f2a:	60da      	str	r2, [r3, #12]
      break;
 8002f2c:	e00b      	b.n	8002f46 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68da      	ldr	r2, [r3, #12]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f042 0210 	orr.w	r2, r2, #16
 8002f3c:	60da      	str	r2, [r3, #12]
      break;
 8002f3e:	e002      	b.n	8002f46 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	73fb      	strb	r3, [r7, #15]
      break;
 8002f44:	bf00      	nop
  }

  if (status == HAL_OK)
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d134      	bne.n	8002fb6 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2201      	movs	r2, #1
 8002f52:	6839      	ldr	r1, [r7, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f000 fd12 	bl	800397e <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a18      	ldr	r2, [pc, #96]	; (8002fc0 <HAL_TIM_IC_Start_IT+0x20c>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d00e      	beq.n	8002f82 <HAL_TIM_IC_Start_IT+0x1ce>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f6c:	d009      	beq.n	8002f82 <HAL_TIM_IC_Start_IT+0x1ce>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a14      	ldr	r2, [pc, #80]	; (8002fc4 <HAL_TIM_IC_Start_IT+0x210>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d004      	beq.n	8002f82 <HAL_TIM_IC_Start_IT+0x1ce>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a12      	ldr	r2, [pc, #72]	; (8002fc8 <HAL_TIM_IC_Start_IT+0x214>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d111      	bne.n	8002fa6 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	2b06      	cmp	r3, #6
 8002f92:	d010      	beq.n	8002fb6 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f042 0201 	orr.w	r2, r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fa4:	e007      	b.n	8002fb6 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f042 0201 	orr.w	r2, r2, #1
 8002fb4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40012c00 	.word	0x40012c00
 8002fc4:	40000400 	.word	0x40000400
 8002fc8:	40000800 	.word	0x40000800

08002fcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d122      	bne.n	8003028 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d11b      	bne.n	8003028 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f06f 0202 	mvn.w	r2, #2
 8002ff8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	f003 0303 	and.w	r3, r3, #3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d003      	beq.n	8003016 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7fd fe0e 	bl	8000c30 <HAL_TIM_IC_CaptureCallback>
 8003014:	e005      	b.n	8003022 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 fa91 	bl	800353e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 fa97 	bl	8003550 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	f003 0304 	and.w	r3, r3, #4
 8003032:	2b04      	cmp	r3, #4
 8003034:	d122      	bne.n	800307c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	f003 0304 	and.w	r3, r3, #4
 8003040:	2b04      	cmp	r3, #4
 8003042:	d11b      	bne.n	800307c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f06f 0204 	mvn.w	r2, #4
 800304c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2202      	movs	r2, #2
 8003052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800305e:	2b00      	cmp	r3, #0
 8003060:	d003      	beq.n	800306a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7fd fde4 	bl	8000c30 <HAL_TIM_IC_CaptureCallback>
 8003068:	e005      	b.n	8003076 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 fa67 	bl	800353e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 fa6d 	bl	8003550 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	f003 0308 	and.w	r3, r3, #8
 8003086:	2b08      	cmp	r3, #8
 8003088:	d122      	bne.n	80030d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	f003 0308 	and.w	r3, r3, #8
 8003094:	2b08      	cmp	r3, #8
 8003096:	d11b      	bne.n	80030d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f06f 0208 	mvn.w	r2, #8
 80030a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2204      	movs	r2, #4
 80030a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7fd fdba 	bl	8000c30 <HAL_TIM_IC_CaptureCallback>
 80030bc:	e005      	b.n	80030ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 fa3d 	bl	800353e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 fa43 	bl	8003550 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	f003 0310 	and.w	r3, r3, #16
 80030da:	2b10      	cmp	r3, #16
 80030dc:	d122      	bne.n	8003124 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	f003 0310 	and.w	r3, r3, #16
 80030e8:	2b10      	cmp	r3, #16
 80030ea:	d11b      	bne.n	8003124 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f06f 0210 	mvn.w	r2, #16
 80030f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2208      	movs	r2, #8
 80030fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f7fd fd90 	bl	8000c30 <HAL_TIM_IC_CaptureCallback>
 8003110:	e005      	b.n	800311e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 fa13 	bl	800353e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 fa19 	bl	8003550 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b01      	cmp	r3, #1
 8003130:	d10e      	bne.n	8003150 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	2b01      	cmp	r3, #1
 800313e:	d107      	bne.n	8003150 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f06f 0201 	mvn.w	r2, #1
 8003148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f9ee 	bl	800352c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800315a:	2b80      	cmp	r3, #128	; 0x80
 800315c:	d10e      	bne.n	800317c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003168:	2b80      	cmp	r3, #128	; 0x80
 800316a:	d107      	bne.n	800317c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 fc8d 	bl	8003a96 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003186:	2b40      	cmp	r3, #64	; 0x40
 8003188:	d10e      	bne.n	80031a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003194:	2b40      	cmp	r3, #64	; 0x40
 8003196:	d107      	bne.n	80031a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f9dd 	bl	8003562 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	f003 0320 	and.w	r3, r3, #32
 80031b2:	2b20      	cmp	r3, #32
 80031b4:	d10e      	bne.n	80031d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	f003 0320 	and.w	r3, r3, #32
 80031c0:	2b20      	cmp	r3, #32
 80031c2:	d107      	bne.n	80031d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f06f 0220 	mvn.w	r2, #32
 80031cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 fc58 	bl	8003a84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031d4:	bf00      	nop
 80031d6:	3708      	adds	r7, #8
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031e8:	2300      	movs	r3, #0
 80031ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d101      	bne.n	80031fa <HAL_TIM_IC_ConfigChannel+0x1e>
 80031f6:	2302      	movs	r3, #2
 80031f8:	e088      	b.n	800330c <HAL_TIM_IC_ConfigChannel+0x130>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d11b      	bne.n	8003240 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003218:	f000 fa0e 	bl	8003638 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	699a      	ldr	r2, [r3, #24]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 020c 	bic.w	r2, r2, #12
 800322a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6999      	ldr	r1, [r3, #24]
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	689a      	ldr	r2, [r3, #8]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	619a      	str	r2, [r3, #24]
 800323e:	e060      	b.n	8003302 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b04      	cmp	r3, #4
 8003244:	d11c      	bne.n	8003280 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003256:	f000 fa77 	bl	8003748 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	699a      	ldr	r2, [r3, #24]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003268:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6999      	ldr	r1, [r3, #24]
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	021a      	lsls	r2, r3, #8
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	619a      	str	r2, [r3, #24]
 800327e:	e040      	b.n	8003302 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b08      	cmp	r3, #8
 8003284:	d11b      	bne.n	80032be <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003296:	f000 fac2 	bl	800381e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	69da      	ldr	r2, [r3, #28]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 020c 	bic.w	r2, r2, #12
 80032a8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	69d9      	ldr	r1, [r3, #28]
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	61da      	str	r2, [r3, #28]
 80032bc:	e021      	b.n	8003302 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b0c      	cmp	r3, #12
 80032c2:	d11c      	bne.n	80032fe <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80032d4:	f000 fade 	bl	8003894 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	69da      	ldr	r2, [r3, #28]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80032e6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	69d9      	ldr	r1, [r3, #28]
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	021a      	lsls	r2, r3, #8
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	61da      	str	r2, [r3, #28]
 80032fc:	e001      	b.n	8003302 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800330a:	7dfb      	ldrb	r3, [r7, #23]
}
 800330c:	4618      	mov	r0, r3
 800330e:	3718      	adds	r7, #24
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800331e:	2300      	movs	r3, #0
 8003320:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003328:	2b01      	cmp	r3, #1
 800332a:	d101      	bne.n	8003330 <HAL_TIM_ConfigClockSource+0x1c>
 800332c:	2302      	movs	r3, #2
 800332e:	e0b4      	b.n	800349a <HAL_TIM_ConfigClockSource+0x186>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2202      	movs	r2, #2
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800334e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003356:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003368:	d03e      	beq.n	80033e8 <HAL_TIM_ConfigClockSource+0xd4>
 800336a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800336e:	f200 8087 	bhi.w	8003480 <HAL_TIM_ConfigClockSource+0x16c>
 8003372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003376:	f000 8086 	beq.w	8003486 <HAL_TIM_ConfigClockSource+0x172>
 800337a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800337e:	d87f      	bhi.n	8003480 <HAL_TIM_ConfigClockSource+0x16c>
 8003380:	2b70      	cmp	r3, #112	; 0x70
 8003382:	d01a      	beq.n	80033ba <HAL_TIM_ConfigClockSource+0xa6>
 8003384:	2b70      	cmp	r3, #112	; 0x70
 8003386:	d87b      	bhi.n	8003480 <HAL_TIM_ConfigClockSource+0x16c>
 8003388:	2b60      	cmp	r3, #96	; 0x60
 800338a:	d050      	beq.n	800342e <HAL_TIM_ConfigClockSource+0x11a>
 800338c:	2b60      	cmp	r3, #96	; 0x60
 800338e:	d877      	bhi.n	8003480 <HAL_TIM_ConfigClockSource+0x16c>
 8003390:	2b50      	cmp	r3, #80	; 0x50
 8003392:	d03c      	beq.n	800340e <HAL_TIM_ConfigClockSource+0xfa>
 8003394:	2b50      	cmp	r3, #80	; 0x50
 8003396:	d873      	bhi.n	8003480 <HAL_TIM_ConfigClockSource+0x16c>
 8003398:	2b40      	cmp	r3, #64	; 0x40
 800339a:	d058      	beq.n	800344e <HAL_TIM_ConfigClockSource+0x13a>
 800339c:	2b40      	cmp	r3, #64	; 0x40
 800339e:	d86f      	bhi.n	8003480 <HAL_TIM_ConfigClockSource+0x16c>
 80033a0:	2b30      	cmp	r3, #48	; 0x30
 80033a2:	d064      	beq.n	800346e <HAL_TIM_ConfigClockSource+0x15a>
 80033a4:	2b30      	cmp	r3, #48	; 0x30
 80033a6:	d86b      	bhi.n	8003480 <HAL_TIM_ConfigClockSource+0x16c>
 80033a8:	2b20      	cmp	r3, #32
 80033aa:	d060      	beq.n	800346e <HAL_TIM_ConfigClockSource+0x15a>
 80033ac:	2b20      	cmp	r3, #32
 80033ae:	d867      	bhi.n	8003480 <HAL_TIM_ConfigClockSource+0x16c>
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d05c      	beq.n	800346e <HAL_TIM_ConfigClockSource+0x15a>
 80033b4:	2b10      	cmp	r3, #16
 80033b6:	d05a      	beq.n	800346e <HAL_TIM_ConfigClockSource+0x15a>
 80033b8:	e062      	b.n	8003480 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033ca:	f000 fab9 	bl	8003940 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	609a      	str	r2, [r3, #8]
      break;
 80033e6:	e04f      	b.n	8003488 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033f8:	f000 faa2 	bl	8003940 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689a      	ldr	r2, [r3, #8]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800340a:	609a      	str	r2, [r3, #8]
      break;
 800340c:	e03c      	b.n	8003488 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800341a:	461a      	mov	r2, r3
 800341c:	f000 f966 	bl	80036ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2150      	movs	r1, #80	; 0x50
 8003426:	4618      	mov	r0, r3
 8003428:	f000 fa70 	bl	800390c <TIM_ITRx_SetConfig>
      break;
 800342c:	e02c      	b.n	8003488 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800343a:	461a      	mov	r2, r3
 800343c:	f000 f9c0 	bl	80037c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2160      	movs	r1, #96	; 0x60
 8003446:	4618      	mov	r0, r3
 8003448:	f000 fa60 	bl	800390c <TIM_ITRx_SetConfig>
      break;
 800344c:	e01c      	b.n	8003488 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800345a:	461a      	mov	r2, r3
 800345c:	f000 f946 	bl	80036ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2140      	movs	r1, #64	; 0x40
 8003466:	4618      	mov	r0, r3
 8003468:	f000 fa50 	bl	800390c <TIM_ITRx_SetConfig>
      break;
 800346c:	e00c      	b.n	8003488 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4619      	mov	r1, r3
 8003478:	4610      	mov	r0, r2
 800347a:	f000 fa47 	bl	800390c <TIM_ITRx_SetConfig>
      break;
 800347e:	e003      	b.n	8003488 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	73fb      	strb	r3, [r7, #15]
      break;
 8003484:	e000      	b.n	8003488 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003486:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003498:	7bfb      	ldrb	r3, [r7, #15]
}
 800349a:	4618      	mov	r0, r3
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
	...

080034a4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80034ae:	2300      	movs	r3, #0
 80034b0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	2b0c      	cmp	r3, #12
 80034b6:	d831      	bhi.n	800351c <HAL_TIM_ReadCapturedValue+0x78>
 80034b8:	a201      	add	r2, pc, #4	; (adr r2, 80034c0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80034ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034be:	bf00      	nop
 80034c0:	080034f5 	.word	0x080034f5
 80034c4:	0800351d 	.word	0x0800351d
 80034c8:	0800351d 	.word	0x0800351d
 80034cc:	0800351d 	.word	0x0800351d
 80034d0:	080034ff 	.word	0x080034ff
 80034d4:	0800351d 	.word	0x0800351d
 80034d8:	0800351d 	.word	0x0800351d
 80034dc:	0800351d 	.word	0x0800351d
 80034e0:	08003509 	.word	0x08003509
 80034e4:	0800351d 	.word	0x0800351d
 80034e8:	0800351d 	.word	0x0800351d
 80034ec:	0800351d 	.word	0x0800351d
 80034f0:	08003513 	.word	0x08003513
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034fa:	60fb      	str	r3, [r7, #12]

      break;
 80034fc:	e00f      	b.n	800351e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003504:	60fb      	str	r3, [r7, #12]

      break;
 8003506:	e00a      	b.n	800351e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800350e:	60fb      	str	r3, [r7, #12]

      break;
 8003510:	e005      	b.n	800351e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003518:	60fb      	str	r3, [r7, #12]

      break;
 800351a:	e000      	b.n	800351e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800351c:	bf00      	nop
  }

  return tmpreg;
 800351e:	68fb      	ldr	r3, [r7, #12]
}
 8003520:	4618      	mov	r0, r3
 8003522:	3714      	adds	r7, #20
 8003524:	46bd      	mov	sp, r7
 8003526:	bc80      	pop	{r7}
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop

0800352c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	bc80      	pop	{r7}
 800353c:	4770      	bx	lr

0800353e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800353e:	b480      	push	{r7}
 8003540:	b083      	sub	sp, #12
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003546:	bf00      	nop
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	bc80      	pop	{r7}
 800354e:	4770      	bx	lr

08003550 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	bc80      	pop	{r7}
 8003560:	4770      	bx	lr

08003562 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003562:	b480      	push	{r7}
 8003564:	b083      	sub	sp, #12
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800356a:	bf00      	nop
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	bc80      	pop	{r7}
 8003572:	4770      	bx	lr

08003574 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a29      	ldr	r2, [pc, #164]	; (800362c <TIM_Base_SetConfig+0xb8>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d00b      	beq.n	80035a4 <TIM_Base_SetConfig+0x30>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003592:	d007      	beq.n	80035a4 <TIM_Base_SetConfig+0x30>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a26      	ldr	r2, [pc, #152]	; (8003630 <TIM_Base_SetConfig+0xbc>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d003      	beq.n	80035a4 <TIM_Base_SetConfig+0x30>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a25      	ldr	r2, [pc, #148]	; (8003634 <TIM_Base_SetConfig+0xc0>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d108      	bne.n	80035b6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a1c      	ldr	r2, [pc, #112]	; (800362c <TIM_Base_SetConfig+0xb8>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d00b      	beq.n	80035d6 <TIM_Base_SetConfig+0x62>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035c4:	d007      	beq.n	80035d6 <TIM_Base_SetConfig+0x62>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a19      	ldr	r2, [pc, #100]	; (8003630 <TIM_Base_SetConfig+0xbc>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d003      	beq.n	80035d6 <TIM_Base_SetConfig+0x62>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a18      	ldr	r2, [pc, #96]	; (8003634 <TIM_Base_SetConfig+0xc0>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d108      	bne.n	80035e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a07      	ldr	r2, [pc, #28]	; (800362c <TIM_Base_SetConfig+0xb8>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d103      	bne.n	800361c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	691a      	ldr	r2, [r3, #16]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	615a      	str	r2, [r3, #20]
}
 8003622:	bf00      	nop
 8003624:	3714      	adds	r7, #20
 8003626:	46bd      	mov	sp, r7
 8003628:	bc80      	pop	{r7}
 800362a:	4770      	bx	lr
 800362c:	40012c00 	.word	0x40012c00
 8003630:	40000400 	.word	0x40000400
 8003634:	40000800 	.word	0x40000800

08003638 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003638:	b480      	push	{r7}
 800363a:	b087      	sub	sp, #28
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
 8003644:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	f023 0201 	bic.w	r2, r3, #1
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	4a1f      	ldr	r2, [pc, #124]	; (80036e0 <TIM_TI1_SetConfig+0xa8>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d00b      	beq.n	800367e <TIM_TI1_SetConfig+0x46>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800366c:	d007      	beq.n	800367e <TIM_TI1_SetConfig+0x46>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	4a1c      	ldr	r2, [pc, #112]	; (80036e4 <TIM_TI1_SetConfig+0xac>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d003      	beq.n	800367e <TIM_TI1_SetConfig+0x46>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	4a1b      	ldr	r2, [pc, #108]	; (80036e8 <TIM_TI1_SetConfig+0xb0>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d101      	bne.n	8003682 <TIM_TI1_SetConfig+0x4a>
 800367e:	2301      	movs	r3, #1
 8003680:	e000      	b.n	8003684 <TIM_TI1_SetConfig+0x4c>
 8003682:	2300      	movs	r3, #0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d008      	beq.n	800369a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	f023 0303 	bic.w	r3, r3, #3
 800368e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4313      	orrs	r3, r2
 8003696:	617b      	str	r3, [r7, #20]
 8003698:	e003      	b.n	80036a2 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	f043 0301 	orr.w	r3, r3, #1
 80036a0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	011b      	lsls	r3, r3, #4
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	f023 030a 	bic.w	r3, r3, #10
 80036bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	f003 030a 	and.w	r3, r3, #10
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	697a      	ldr	r2, [r7, #20]
 80036ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	621a      	str	r2, [r3, #32]
}
 80036d6:	bf00      	nop
 80036d8:	371c      	adds	r7, #28
 80036da:	46bd      	mov	sp, r7
 80036dc:	bc80      	pop	{r7}
 80036de:	4770      	bx	lr
 80036e0:	40012c00 	.word	0x40012c00
 80036e4:	40000400 	.word	0x40000400
 80036e8:	40000800 	.word	0x40000800

080036ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b087      	sub	sp, #28
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	f023 0201 	bic.w	r2, r3, #1
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003716:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	011b      	lsls	r3, r3, #4
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	4313      	orrs	r3, r2
 8003720:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	f023 030a 	bic.w	r3, r3, #10
 8003728:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	4313      	orrs	r3, r2
 8003730:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	621a      	str	r2, [r3, #32]
}
 800373e:	bf00      	nop
 8003740:	371c      	adds	r7, #28
 8003742:	46bd      	mov	sp, r7
 8003744:	bc80      	pop	{r7}
 8003746:	4770      	bx	lr

08003748 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003748:	b480      	push	{r7}
 800374a:	b087      	sub	sp, #28
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
 8003754:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	f023 0210 	bic.w	r2, r3, #16
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003774:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	021b      	lsls	r3, r3, #8
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	4313      	orrs	r3, r2
 800377e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003786:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	031b      	lsls	r3, r3, #12
 800378c:	b29b      	uxth	r3, r3
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	4313      	orrs	r3, r2
 8003792:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800379a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	011b      	lsls	r3, r3, #4
 80037a0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	621a      	str	r2, [r3, #32]
}
 80037b6:	bf00      	nop
 80037b8:	371c      	adds	r7, #28
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bc80      	pop	{r7}
 80037be:	4770      	bx	lr

080037c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b087      	sub	sp, #28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6a1b      	ldr	r3, [r3, #32]
 80037d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	f023 0210 	bic.w	r2, r3, #16
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	031b      	lsls	r3, r3, #12
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037fc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	011b      	lsls	r3, r3, #4
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	4313      	orrs	r3, r2
 8003806:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	621a      	str	r2, [r3, #32]
}
 8003814:	bf00      	nop
 8003816:	371c      	adds	r7, #28
 8003818:	46bd      	mov	sp, r7
 800381a:	bc80      	pop	{r7}
 800381c:	4770      	bx	lr

0800381e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800381e:	b480      	push	{r7}
 8003820:	b087      	sub	sp, #28
 8003822:	af00      	add	r7, sp, #0
 8003824:	60f8      	str	r0, [r7, #12]
 8003826:	60b9      	str	r1, [r7, #8]
 8003828:	607a      	str	r2, [r7, #4]
 800382a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	f023 0303 	bic.w	r3, r3, #3
 800384a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4313      	orrs	r3, r2
 8003852:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800385a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	011b      	lsls	r3, r3, #4
 8003860:	b2db      	uxtb	r3, r3
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	4313      	orrs	r3, r2
 8003866:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800386e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	021b      	lsls	r3, r3, #8
 8003874:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	4313      	orrs	r3, r2
 800387c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	621a      	str	r2, [r3, #32]
}
 800388a:	bf00      	nop
 800388c:	371c      	adds	r7, #28
 800388e:	46bd      	mov	sp, r7
 8003890:	bc80      	pop	{r7}
 8003892:	4770      	bx	lr

08003894 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003894:	b480      	push	{r7}
 8003896:	b087      	sub	sp, #28
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
 80038a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	69db      	ldr	r3, [r3, #28]
 80038b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038c0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	021b      	lsls	r3, r3, #8
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038d2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	031b      	lsls	r3, r3, #12
 80038d8:	b29b      	uxth	r3, r3
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	4313      	orrs	r3, r2
 80038de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038e6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	031b      	lsls	r3, r3, #12
 80038ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	621a      	str	r2, [r3, #32]
}
 8003902:	bf00      	nop
 8003904:	371c      	adds	r7, #28
 8003906:	46bd      	mov	sp, r7
 8003908:	bc80      	pop	{r7}
 800390a:	4770      	bx	lr

0800390c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003922:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	4313      	orrs	r3, r2
 800392a:	f043 0307 	orr.w	r3, r3, #7
 800392e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	609a      	str	r2, [r3, #8]
}
 8003936:	bf00      	nop
 8003938:	3714      	adds	r7, #20
 800393a:	46bd      	mov	sp, r7
 800393c:	bc80      	pop	{r7}
 800393e:	4770      	bx	lr

08003940 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003940:	b480      	push	{r7}
 8003942:	b087      	sub	sp, #28
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
 800394c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800395a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	021a      	lsls	r2, r3, #8
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	431a      	orrs	r2, r3
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	4313      	orrs	r3, r2
 8003968:	697a      	ldr	r2, [r7, #20]
 800396a:	4313      	orrs	r3, r2
 800396c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	609a      	str	r2, [r3, #8]
}
 8003974:	bf00      	nop
 8003976:	371c      	adds	r7, #28
 8003978:	46bd      	mov	sp, r7
 800397a:	bc80      	pop	{r7}
 800397c:	4770      	bx	lr

0800397e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800397e:	b480      	push	{r7}
 8003980:	b087      	sub	sp, #28
 8003982:	af00      	add	r7, sp, #0
 8003984:	60f8      	str	r0, [r7, #12]
 8003986:	60b9      	str	r1, [r7, #8]
 8003988:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	f003 031f 	and.w	r3, r3, #31
 8003990:	2201      	movs	r2, #1
 8003992:	fa02 f303 	lsl.w	r3, r2, r3
 8003996:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6a1a      	ldr	r2, [r3, #32]
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	43db      	mvns	r3, r3
 80039a0:	401a      	ands	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6a1a      	ldr	r2, [r3, #32]
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	f003 031f 	and.w	r3, r3, #31
 80039b0:	6879      	ldr	r1, [r7, #4]
 80039b2:	fa01 f303 	lsl.w	r3, r1, r3
 80039b6:	431a      	orrs	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	621a      	str	r2, [r3, #32]
}
 80039bc:	bf00      	nop
 80039be:	371c      	adds	r7, #28
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bc80      	pop	{r7}
 80039c4:	4770      	bx	lr
	...

080039c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d101      	bne.n	80039e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039dc:	2302      	movs	r3, #2
 80039de:	e046      	b.n	8003a6e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2202      	movs	r2, #2
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a16      	ldr	r2, [pc, #88]	; (8003a78 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d00e      	beq.n	8003a42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a2c:	d009      	beq.n	8003a42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a12      	ldr	r2, [pc, #72]	; (8003a7c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d004      	beq.n	8003a42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a10      	ldr	r2, [pc, #64]	; (8003a80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d10c      	bne.n	8003a5c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68ba      	ldr	r2, [r7, #8]
 8003a5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bc80      	pop	{r7}
 8003a76:	4770      	bx	lr
 8003a78:	40012c00 	.word	0x40012c00
 8003a7c:	40000400 	.word	0x40000400
 8003a80:	40000800 	.word	0x40000800

08003a84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bc80      	pop	{r7}
 8003a94:	4770      	bx	lr

08003a96 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bc80      	pop	{r7}
 8003aa6:	4770      	bx	lr

08003aa8 <memset>:
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	4402      	add	r2, r0
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d100      	bne.n	8003ab2 <memset+0xa>
 8003ab0:	4770      	bx	lr
 8003ab2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ab6:	e7f9      	b.n	8003aac <memset+0x4>

08003ab8 <__libc_init_array>:
 8003ab8:	b570      	push	{r4, r5, r6, lr}
 8003aba:	2600      	movs	r6, #0
 8003abc:	4d0c      	ldr	r5, [pc, #48]	; (8003af0 <__libc_init_array+0x38>)
 8003abe:	4c0d      	ldr	r4, [pc, #52]	; (8003af4 <__libc_init_array+0x3c>)
 8003ac0:	1b64      	subs	r4, r4, r5
 8003ac2:	10a4      	asrs	r4, r4, #2
 8003ac4:	42a6      	cmp	r6, r4
 8003ac6:	d109      	bne.n	8003adc <__libc_init_array+0x24>
 8003ac8:	f000 f81a 	bl	8003b00 <_init>
 8003acc:	2600      	movs	r6, #0
 8003ace:	4d0a      	ldr	r5, [pc, #40]	; (8003af8 <__libc_init_array+0x40>)
 8003ad0:	4c0a      	ldr	r4, [pc, #40]	; (8003afc <__libc_init_array+0x44>)
 8003ad2:	1b64      	subs	r4, r4, r5
 8003ad4:	10a4      	asrs	r4, r4, #2
 8003ad6:	42a6      	cmp	r6, r4
 8003ad8:	d105      	bne.n	8003ae6 <__libc_init_array+0x2e>
 8003ada:	bd70      	pop	{r4, r5, r6, pc}
 8003adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ae0:	4798      	blx	r3
 8003ae2:	3601      	adds	r6, #1
 8003ae4:	e7ee      	b.n	8003ac4 <__libc_init_array+0xc>
 8003ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aea:	4798      	blx	r3
 8003aec:	3601      	adds	r6, #1
 8003aee:	e7f2      	b.n	8003ad6 <__libc_init_array+0x1e>
 8003af0:	08003b54 	.word	0x08003b54
 8003af4:	08003b54 	.word	0x08003b54
 8003af8:	08003b54 	.word	0x08003b54
 8003afc:	08003b58 	.word	0x08003b58

08003b00 <_init>:
 8003b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b02:	bf00      	nop
 8003b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b06:	bc08      	pop	{r3}
 8003b08:	469e      	mov	lr, r3
 8003b0a:	4770      	bx	lr

08003b0c <_fini>:
 8003b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b0e:	bf00      	nop
 8003b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b12:	bc08      	pop	{r3}
 8003b14:	469e      	mov	lr, r3
 8003b16:	4770      	bx	lr
